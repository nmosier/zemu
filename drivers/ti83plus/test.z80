#include "zti.inc"
#include "zdisp.inc"

.org userMem-2
.db t2ByteTok,tAsmCmp

#macro LOG_VALUE(name, value)
  ld hl,name
  bcall(_PutS)
  ld hl,value
  bcall(_DispHL)
  bcall(_NewLine)
#endmacro

#macro LOG_HL(name)
  push hl
  ld hl,name
  bcall(_Puts)
  pop hl
  bcall(_DispHL)
  bcall(_NewLine)
#endmacro

#macro TEST_LEFT(orgcol, width, expect)
  ld d,orgcol
  ld e,width
  ld a,d
  neg
  and a,%111
  call maskb
  neg
  cp a,expect
  jr z,_
  ;; test failed
  ld hl,0
  ld (curRow),hl
  push af
  LOG_VALUE(s_orgcol, orgcol)
  LOG_VALUE(s_width, width)
  LOG_VALUE(s_expected, expect)
  pop af
  ld h,0
  ld l,a
  LOG_HL(s_got)
  bcall(_GetKey)
_
#endmacro

#macro TEST_RIGHT(orgcol, width, expect)
  ld d,orgcol
  ld e,width
  
  ld a,d
  add a,e
  neg
  and a,%111
  call maskb
  dec a
  jr nz,_ ; if a == $00, then a <- $ff
  dec a
_
  cp a,expect
  jr z,_
  ;; test failed
  push af
  LOG_VALUE(s_orgcol, orgcol)
  LOG_VALUE(s_width, width)
  LOG_VALUE(s_expected, expect)
  pop af
  ld h,0
  ld l,a
  LOG_HL(s_got)
  bcall(_GetKey)
_
#endmacro

#macro LOG(str)
  ld hl,_
  bcall(_PutS)
  bcall(_NewLine)
  jr ++_
_:  .db str,0
_
#endmacro

tests:
  ld hl,0
  ld (curRow),hl
  bcall(_ClrScrnFull)
  LOG("testing left")
  TEST_LEFT(1, 9, $80)
  TEST_LEFT(0, 1, $ff)
  TEST_LEFT(8, 1, $ff)
  TEST_LEFT(7, 10,$fe)
  LOG("testing right")
  TEST_RIGHT(1, 9, $3f)
  TEST_RIGHT(0, 1, $7f)
  TEST_RIGHT(8, 1, $7f)
  TEST_RIGHT(0, 7, $01)
  TEST_RIGHT(8, 8, $ff)
  ret

s_orgcol: .db "orgcol: ",0
s_width: .db "width: ",0
s_expected: .db "expected: ",0
s_got: .db "got: ",0

start:
  ld a,$aa
  call fill
  bcall(_GrBufCpy)
  bcall(_GetKey)
  ld ix,rect
  ld a,1
  call zdisp_scrollrect_up
  bcall(_GetKey)
  ret

;; fill -- fill screen with 8-bit pattern
;; INPUTS:
;;  a = pattern
;; OUTPUTS: (none)
;; DESTROYS: (all)
fill:
   ld hl,DISP_VRAM
   ld bc,DISP_WIDTH*DISP_HEIGHT/8
   call memset
   ret


;; GLOBAL VARS ;;
rect: D_ZRECT(DISP_WIDTH/4, DISP_HEIGHT/4, DISP_WIDTH/2, DISP_HEIGHT/2)

#include "zdisp.z80"