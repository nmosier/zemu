#ifndef TI83PLUS_ZADDR_Z80
#define TI83PLUS_ZADDR_Z80

;; zaddr_cp -- compare Z-addresses
;; INPUTS:
;;  [b:hl] = lhs
;;  [c:de] = rhs
;; OUTPUTS: flags
;; ERRORS: no.
;; DESTROYS: (none)
zaddr_cp:
  push af ; save a
  ld a,b
  cp a,c
  ex (sp),hl
  ld a,h ; restore a
  pop hl
  ret nz
  jp cp_hl_de

;; zaddr_inc -- increment Z-address
;; INPUTS:
;;  [b:hl] = Z-address
;; OUTPUTS:
;;  [b:hl] <- [b:hl] + 1
;; ERRORS: no.
;; DESTROYS: (none)
zaddr_inc:
  inc l
  ret nz
  inc h
  ret nz
  inc b
  ret

;; zaddr_dec -- decrement Z-addr
;; INPUTS:
;;  [b:hl] = Z-addr
;; OUTPUTS:
;;  [b:hl] <- [b:hl] - 1
;; ERRORS: no.
;; DESTROYS: (none)
zaddr_dec:
  call cp_hl_0
  jr nz,_
  dec b
_ dec hl
  ret
  

;; zaddr_add -- add Z-addresses
;; INPUTS:
;;  [b:hl] = lhs Z-address
;;  [c:de] = rhs Z-address
;; OUTPUTS:
;;  [b:hl] <- [b:hl] + [c:de]
;; ERRORS: no.
;; DESTROYS: (none)
zaddr_add:
  push de
  add hl,de
  ld d,a
  ld a,b
  adc a,c
  ld b,a
  ld a,d
  pop de
  ret



;; zaddr_ex -- exchange Z-addresses
;; INPUTS:
;;  [b:hl] = lhs Z-address
;;  [c:de] = rhs Z-address
;; OUTPUTS:
;;  [b:hl] <- [c:de]
;;  [c:de] <- [b:hl]
;; ERRORS: no.
;; DESTROYS: (none)
zaddr_ex:
  ex de,hl
  push af
  ld a,b
  ld b,c
  ld c,a
  pop af
  ret


;; zaddr_load_from_paddr_{bhl,cde} -- load Z-address from memory
;; INPUTS:
;;  {hl,de} = p-addr to load from
;; OUTPUTS:
;;  {[b:hl],[c:de]} = Z-addr at ({hl,de})
;; DESTROYS: (none)
zaddr_load_from_paddr_bhl:
  push af
  ld a,(hl)
  inc hl
  ld b,(hl)
  inc hl
  ld l,(hl)
  ld h,b
  ld b,l
  ld l,a
  pop af
  ret

zaddr_load_from_paddr_cde:
  call zaddr_ex
  call zaddr_load_from_paddr_bhl
  jp zaddr_ex

#if 0
zaddr_trap_bhl:
  push af
  ld a,1
  cp a,b
zaddr_trap_bhl.trap:
  jr c,zaddr_trap_bhl.trap
  pop af
  ret

zaddr_trap_cde:
  push af
  ld a,1
  cp a,c
zaddr_trap_cde.trap:
  jr c,zaddr_trap_cde.trap
  pop af
  ret
#endif  


;; file_readza -- read Z-address from file
;; INPUTS:
;;  ix = file pointer
;;  hl = offset to read from
;; OUTPUTS:
;;  [b:hl] = Z-address
;; DESTROYS: ???
;; ERRORS: yes.
file_readza:
  ld de,file_readza.buf
  ld bc,3
  call file_readn
  ld hl,(file_readza.buf)
  ld a,(file_readza.buf+2)
  ld b,a
  ret

file_readza.buf: RESB(3)


#endif
