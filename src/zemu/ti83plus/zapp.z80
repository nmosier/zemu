#ifndef TI83PLUS_ZAPP_Z80
#define TI83PLUS_ZAPP_Z80


;; appvar_find -- find AppVar
;; INPUTS:
;;  hl = name string
;; OUTPUTS:
;;  de = pointer to appvar data
;;  a = whether in RAM ($00 = no, $ff = yes)
;;  ZF = whether in RAM (z = no, nz = yes)
;; ERRORS: yes.
;; NOTE: Doesn't change storage location (archive vs. RAM).
;; *** portable ***
appvar_find:
   call appvar_to_OP1
   SYSCALL(_ChkFindSym)
   ld a,ZERR_NOVAR
   ret c
   xor a,a
   inc b \ dec b
   jr nz,_
   cpl
_  or a,a
   ret



;; appvar_copy -- copy contents of one appvar into another
;; INPUTS:
;;  hl = name of src appvar
;;  de = name of dst appvar
;; OUTPUTS:
;;  hl = dst appvar data ptr
;; ERRORS: yes (memory)
;; DESTROYS: (all)
;; *** portable ***
appvar_copy:
  ;; get size of appvar
  push de ; save dst name
  call appvar_info
  jr c,appvar_copy.err1
  ex (sp),hl
  push bc
  push af
  ;; create & resize appvar
  call appvar_touch_trunc
  jr c,appvar_copy.err3
  ;; copy data
  ex de,hl
  pop af
  pop bc
  pop hl
  bcall(_FlashToRAM)
  or a,a
  ret

appvar_copy.err3:
  pop hl
  pop hl
appvar_copy.err1:
  pop hl
  ret


;; appvar_size -- get size of appvar, regardless of location
;; INPUTS:
;;  hl = name of appvar
;; OUTPUTS:
;;  hl = size of appvar
;; DESTROYS: (all)
;; ERRORS: yes.
appvar_size:
  call appvar_to_OP1
appvar_size_OP1:
  bcall(_ChkFindSym)
  ld a,ZERR_NOVAR
  ret c
  xor a,a
  cp a,b
  jr z,appvar_size.RAM
  sbc hl,hl ; ld hl,0
  push hl
  add hl,sp
  ex de,hl
  ld a,b
  ld bc,17 ; magic constant for AppVar size bytes in flash
  add hl,bc
  ld bc,2 ; 2 size bytes
  bcall(_FlashToRAM)
  pop hl ; hl contains size bytes
  ret
  
appvar_size.RAM:
  ;; get size bytes at (de)
  ex de,hl
  ld e,(hl)
  inc hl
  ld d,(hl)
  ex de,hl
  ret


;; appvar_pointer(_OP1) -- get pointer to appvar data, regardless of location
;; INPUTS:
;;  hl = name of appvar (only appvar_pointer)
;; OUTPUTS:
;;  hl = RAM address or page offset
;;  a = flash page, or 0 if in RAM
;; DESTROYS: (all)
;; ERRORS: yes.
appvar_pointer:
  call appvar_to_OP1
appvar_pointer_OP1:
  bcall(_ChkFindSym)
  ld a,ZERR_NOVAR
  ret c
  ld a,b
  or a,a
  jr nz,appvar_pointer.archive
appvar_pointer.RAM:
  ex de,hl
  inc hl
  inc hl
  ret
  
appvar_pointer.archive:
  ex de,hl
  ld de,19 ; magic number for AppVar data in flash
  add hl,de
  ret nc
  ld a,ZERR_INTERNAL
  ret


;; appvar_info -- get location info for appvar, regardless of location
;; INPUTS:
;;  hl = name of appvar
;; OUTPUTS:
;;  hl = RAM address or page offset
;;  bc = size
;;  a = flash page, or 0 if in RAM
;; DESTROYS: (all)
;; ERRORS: yes.
appvar_info:
  push hl
  call appvar_size
  ex (sp),hl ; save size, restore name
  call nc,appvar_pointer
  pop bc     ; restore size
  ret


; appvar_to_RAM -- bring appvar into RAM
; INPUTS:
;  hl = name string
; OUTPUTS:
;  de = pointer to appvar data in RAM
; ERROR: a = error code, CF set
; DESTROYS: (all), OP1
; *** portable ***
appvar_to_RAM:
   call appvar_find
   ret c  ; AppVar not found
   ret nz ; already in RAM
   AppOnErr(appvar_err.nomem)
   SYSCALL(_Arc_Unarc)
   AppOffErr
   ld a,AppVarObj ; stupid bug in TIOS
   ld (OP1),a
   SYSCALL(_ChkFindSym)
   ret ; NOTE: CF always reset, since we know appvar exists

appvar_err.nomem:
  ld a,ZERR_NOMEM
  scf
  ret


#endif