#ifndef TI83PLUS_ZDISP_Z80
#define TI83PLUS_ZDISP_Z80

#include "zdisp.inc"

;; zdisp_show -- show updated buffer
;; INPUTS: (none)
;; OUTPUTS: (none)
;; DESTROYS: (all)
zdisp_show:
  push ix
  bcall(_GrBufCpy)
  pop ix
  ret

;; zdisp_clearrect -- clear rectangle
;; INPUTS:
;;  ix = zrect pointer
;; OUTPUTS:
;;  ix = zrect pointer
;; DESTROYS: (all)
;; ERRORS: no.
zdisp_clearrect:
   ld h,(ix+ZRECT.ORGROW)
   ld a,h
   add a,(ix+ZRECT.HEIGHT)
   dec a
   ld d,a
   ld l,(ix+ZRECT.ORGCOL)
   ld a,l
   add a,(ix+ZRECT.WIDTH)
   dec a
   ld e,a
   push ix
   bcall(_ClearRect)
   pop ix
   ret


;; zdisp_init -- do basic initialization of LCD
;; INPUTS: (none)
;; OUTPUTS: (none)
;; ERRORS: no.
;; DESTROYS: (none)
zdisp_init:
   res plotLoc,(iy+plotFlags)
   ret

;; zdisp_scrollrect_up.copy.aligned
;; INPUTS
;;  h = start row
;;  l = height (pixels)
;;  d = start col byte
;;  e = width (bytes)
;;  a = upward shift
;; OUTPUTS: (none)
;; DESTROYS: bc, de, hl
zdisp_scrollrect_up.copy.aligned:
  push af
  ld c,a ; save shift
  sub a,l
  ret nc ; height <= shift, so nothing to do
  neg
  ld b,a ; b = number of rows to copy (b > 0)
  ld a,c ; restore shift
  ld c,e ; save width
  call zdisp_get_src_dst ; preserves bc
  ld a,b
  ld b,0
zdisp_scollrect_up.copy.aligned.loop:
  push bc
  push hl
  push de
  ldir
  ld bc,DISP_WIDTH/8
  pop hl
  add hl,bc
  ex de,hl
  pop hl
  add hl,bc
  pop bc
  dec a
  jr nz,zdisp_scollrect_up.copy.aligned.loop
  pop af
  ret

;; zdisp_get_src_dst -- get source and destination of column in VRAM
;; INPUTS:
;;  a = upward shift
;;  h = start row
;;  l = height
;;  d = start column group
;; OUTPUTS:
;;  hl = source
;;  de = destination
;; DESTROYS: (none)
;; REQUIRES: height > shift (l > a)
zdisp_get_src_dst:
  push af
  push bc
  ;; get copy source
  add a,h ; shift + row
  ld c,d  ; col
  push hl
  call zdisp_byteaddr
  ex (sp),hl ; save source on stack, get old hl
  ;; get copy dest
  ld a,h ; row
  call zdisp_byteaddr
  ;; done
  ex de,hl
  pop hl
  pop bc
  pop af
  ret  




;; zdisp_scrollrect_up.copy.column -- scroll rectangle up fitting in single column byte
;; INPUTS
;;  h = start row
;;  l = height (pixels)
;;  d = start col byte
;;  e = mask
;;  a = upward shift
;; OUTPUTS: (none)
;; DESTROYS: (none)
;; OPTIM: unite with zdisp_scrollrect_up.copy.*
zdisp_scrollrect_up.copy.column:
  push af
  push bc
  push de
  push hl
  ld c,a ; save shift
  sub a,l
  ret nc ; height <= shift, so nothing to do
  neg
  ld b,a ; b = number of rows to copy (b > 0)
  ld a,c ; restore shift
  ld c,e ; save width
  call zdisp_get_src_dst ; preserves bc
zdisp_scrollrect_up.copy.column.loop:
  ld a,(hl)
  and a,c
  ld (de),a
  push bc
  ld bc,DISP_WIDTH/8
  add hl,bc
  ex de,hl
  add hl,bc
  ex de,hl
  pop bc
  djnz zdisp_scrollrect_up.copy.column.loop
  pop hl
  pop de
  pop bc
  pop af
  ret


;; zdisp_scrollrect_up.copy -- scroll up by copying contents of VRAM
;; INPUTS:
;;  ix = rectangle
;;  a = upward shift
;; OUTPUTS:
;;  ix = rectangle
;;  a = upward shift
;; ERRORS: no.
;; DESTROYS: bc, de, hl
zdisp_scrollrect_up.copy:
  push af
  ;; h = ORGROW
  ;; l = HEIGHT
  ;; d = ORGCOL
  ;; e = WIDTH
  ld h,(ix+ZRECT.ORGROW)
  ld l,(ix+ZRECT.HEIGHT)
  ld d,(ix+ZRECT.ORGCOL)
  ld e,(ix+ZRECT.WIDTH)
  ;; compute overhang masks
  ;; left overhang
  ld a,d
  neg
  and a,%111
  call maskb
  neg
  ld b,a
  ;; right overhang
  ld a,d
  add a,e
  neg
  and a,%111
  call maskb
  dec a
  jr nz,_ ; if a == $00, then a <- $ff
  dec a
_ ld c,a
  
  ;; check if overhangs are in one column byte
  ld a,d
  neg
  and a,%111 ; a <- 8 - (a % 8)
  cp a,e
  jr nc,zdisp_clearrect.colbyte ; only one column byte

  pop af
  push de

  ;; scroll left overhang
  ld e,b
  srl d \ srl d \ srl d
  inc e
  dec e
  call nc,zdisp_scrollrect_up.copy.column ; call if e != $ff

  ;; scroll right overhang
  pop de
  push de
  ld b,a
  ld a,d
  add a,e
  call div_a_8
  ld d,a
  ld e,c
  ld a,b
  inc e
  dec e
  call nc,zdisp_scrollrect_up.copy.column ; call if e != $ff

  pop de

  ;; scroll aligned middle
  ld c,a ; save shift
  ld a,d
  add a,e
  call div_a_8
  ld e,a
  ld a,d
  dec a
  and a,%111
  inc a
  call div_a_8
  ld d,a
  sub a,e
  neg
  ld e,a
  ld a,c ; restore shift
  jp zdisp_scrollrect_up.copy.aligned
   
zdisp_clearrect.colbyte:
   ;; get column byte
   srl d
   srl d
   srl d
   ld e,a ; save shift
   ld a,b
   or a,c
   ld b,a ; save mask
   ld a,e ; restore shift
   ld e,b ; restore mask
   jp zdisp_scrollrect_up.copy.column

;; zdisp_byteaddr -- get address of byte in VRAM
;; INPUTS
;;  a = row
;;  c = column group
;; OUTPUTS:
;;  hl = byte address
;; ERRORS: no.
;; DESTROYS: a
zdisp_byteaddr:
   push bc
   ld hl,DISP_WIDTH/8
   call mul_hl_a
   ld b,0
   add hl,bc
   ld bc,DISP_VRAM
   add hl,bc
   pop bc
   ret

#include "util.z80"

#endif