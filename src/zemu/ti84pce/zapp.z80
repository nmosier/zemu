#ifndef TI84PCE_ZAPP_Z80
#define TI84PCE_ZAPP_Z80

;; syment_size -- compute size of symbol table entry
;; INPUTS:
;;  hl = pointer to symbol table entry
;; OUTPUTS:
;;  de = size
;; DESTROYS: all but hl
;; ERRORS: no.
;; *** portable ***
syment_size:
   ld bc,SYMENT.NL
   ld a,SYMENT.VARNAME
   add hl,bc
   add a,(hl)
   sbc hl,bc   ; always NC
   UCAST_A_TO_DE
   ret


;; appvar_copy -- copy contents of one appvar into another
;; INPUTS:
;;  hl = name of src appvar
;;  de = name of dst appvar
;; OUTPUTS:
;;  hl = dst appvar data ptr
;; ERRORS: yes (memory)
;; DESTROYS: (all)
;; *** portable ***
appvar_copy:
   push de        ; preserve dst name
   call appvar_find   ; can be read directly in archive
   jr c,appvar_copy.done
   ex de,hl ; hl <- address (regardless of whether in RAM/archive)
   ;; fetch src size
   dec hl \ dec hl ; get to size bytes
   ld bc,0
   ld c,(hl)
   inc hl
   ld b,(hl)
   inc hl
   ex (sp),hl  ; preserve src ptr and restore dst name
   push bc     ; preserve size
   call nc,appvar_touch_trunc
   ex de,hl    ; de <- dst ptr
   pop bc      ; restore size
   pop hl      ; restore src ptr
   ret c       ; ERROR
   push de
   ldir        ; perform copy
appvar_copy.done:
   pop hl      ; restore dst ptr
   ret         ; SUCCESS



;; appvar_find -- find AppVar
;; INPUTS:
;;  hl = name string
;; OUTPUTS:
;;  de = pointer to appvar data
;;   TI83PLUS: only if in RAM (nz)
;;   TI84PCE: always
;;  a = whether in RAM ($00 = no, $ff = yes)
;;  ZF = whether in RAM (z = no, nz = yes)
;; ERRORS: yes.
;; NOTE: Doesn't change storage location (archive vs. RAM).
;; *** portable ***
appvar_find:
   call appvar_to_OP1
   SYSCALL(_ChkFindSym)
   ld a,ZERR_NOVAR
   ret c
   call _ChkInRam
   ld a,$ff
   jr z,_ ; in RAM, so don't skip syment
   ex de,hl
   call syment_size
   add hl,de   ; skip entry
   ex de,hl
   xor a,a     ; not in RAM
_  inc de \ inc de ; skip size bytes
   or a,a
   ret


; appvar_to_RAM -- bring appvar into RAM
; INPUTS:
;  hl = name string
; OUTPUTS:
;  de = pointer to appvar data in RAM
; ERROR: a = error code, CF set
; DESTROYS: (all), OP1
; *** portable ***
appvar_to_RAM:
   call appvar_find
   ret c  ; AppVar not found
   ret nz ; already in RAM
   ex de,hl
   CLEAR_UPPER_DE
   dec hl
   ld d,(hl)
   dec hl
   ld e,(hl)
   SYSCALL(_MemChk)
   or a,a
   sbc hl,de
   ld a,ZERR_NOMEM
   ret c
   SYSCALL(_Arc_Unarc)
   SYSCALL(_ChkFindSym)
   ret ; NOTE: CF will always be reset


#endif