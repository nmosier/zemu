#ifndef TI84PCE_ZFILE_Z80
#define TI84PCE_ZFILE_Z80

;; file_addr -- get address of byte in file
;; INPUTS:
;;  ix = file pointer
;;  hl = offset (offset < 16K)
;; OUTPUTS:
;;  [a:hl] = RAM/flash address of byte
;;  ZF = whether in RAM (Z = RAM, NZ = flash)
;; DESTROYS: (all)
;; ERRORS: yes.
file_addr:
#if CHECK_BOUNDS
  ld de,0
  ld e,(ix+FILE.SIZE)
  ld d,(ix+FILE.SIZE+1)
  call cp_hl_de
  ccf
  ld a,ZERR_READEOF
  ret c
#endif
  push hl
   call file_baseaddr
  pop de
  ret c
  add hl,de
  ret ; always NC

;; file_baseaddr -- get pointer to beginning of file
;; INPUTS:
;;  ix = file pointer
;; OUTPUTS:
;;  [a:hl] = RAM/flash address of byte
;;  ZF = whether in RAM (Z = RAM, NZ = flash)
;; DESTROYS: (all)
;; ERRORS: yes.
file_baseaddr:
  call file_tabent
  bit FILETAB_ENT.FLAGS.DIRTY,(hl)
  jr nz,file_baseaddr.dirty ; dirty, so need to recompute
  ld de,(ix+FILE.PTR)
  call _ChkInRAM
  ex de,hl
  scf \ ccf
  ret
  
file_baseaddr.dirty:
  res FILETAB_ENT.FLAGS.DIRTY,(hl)
  call file_info
  ret c
  ex de,hl
  jr z,file_addr.dirty.RAM
file_baseaddr.dirty.archive:
  ld de,9
  add hl,de
  ld de,0
  ld e,(hl) ; name length
  inc hl    ; skip byte
  add hl,de ; skip name
file_addr.dirty.RAM:
file_addr.dirty.done:
  inc hl \ inc hl ; skip size bytes
  ld (ix+FILE.PTR),hl
  ret  


;; file_size -- get size of file
;; INPUTS:
;;  ix = file ointer
;; OUTPUTS:
;;  hl = size
;; DESTROYS: (all)
;; ERRORS: yes.
file_size:
  call file_baseaddr
  ret c
  ld de,0
  dec hl
  ld d,(hl)
  dec hl
  ld e,(hl)
  ex de,hl
  ret



;; file_readb -- read byte from file
;; INPUTS:
;;  ix = file pointer
;;  hl = offset into file
;; OUTPUTS:
;;  a = byte
;; DESTROYS: (all)
;; ERRORS: yes.
file_readb:
  call file_addr
  ret c
  ld a,(hl)
  ret


;; file_readw -- read word from file
;; INPUTS:
;;  ix = file pointer
;;  hl = offset into file
;; OUTPUTS:
;;  hl = word
;; DESTROYS: (all)
;; ERRORS: yes.
file_readw:
  call file_addr
  ret c
  CLEAR_UPPER_DE
  ld e,(hl)
  inc hl
  ld d,(hl)
  ex de,hl
  ret


;; file_readl -- read long from file
;; INPUTS:
;;  ix = file pointer
;;  hl = offset into file
;; OUTPUTS:
;;  hl = long
;; DESTROYS: (all)
;; ERRORS: yes.
file_readl:
  call file_addr
  ret c
  ld hl,(hl)
  ret


;; file_writel -- write word to file
;; INPUTS:
;;  ix = file struct
;;  hl = file offset
;;  de = long
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
file_writel:
  push de
  push hl
  call file_to_RAM
  pop hl
  pop bc
  ret c
  add hl,de
  ld (hl),bc
  ret


#endif