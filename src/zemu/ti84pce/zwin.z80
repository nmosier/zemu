#ifndef TI84PCE_ZWIN_Z80
#define TI84PCE_ZWIN_Z80

;; zwin_select -- select window for displaying characters
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS: (none)
;; DESTROYS: (none)
;; ERRORS: no.
;; *** portable ***
zwin_select:
  push af
  push hl
  ld a,(ix+ZWIN.CURROW)
  ld (penRow),a
  ld hl,(ix+ZWIN.CURCOL)
  ld (penCol),hl
  pop hl
  pop af
  ret

#ifdef ZBORDER
;; zwin_border -- display window border
;; INPUTS:
;;  ix = window
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: no.
;; NOTE: Assumes that window has display margin of at least 1px.
zwin_border:
   ;; fetch rows
   ld a,(ix+ZWIN.ORGROW)
   ld b,a
   dec b
   add a,(ix+ZWIN.HEIGHT)
   ld c,a
   ;; fetch cols
   ld de,(ix+ZWIN.ORGCOL)
   ld hl,(ix+ZWIN.WIDTH)
   add hl,de
   ex de,hl
   dec hl
   ;; draw rect
   push ix
   call _DrawRectBorder
   pop ix
   ret
#endif


;; zwin_putc.base.other
;; INPUTS:
;;  a = character
;;  ix = pointer to window struct
;; OUTPUTS:
;;  ix = pointer to window struct
;; DESTROYS: (all)
;; ERRORS: (none)
zwin_putc.base.other:
  push ix
   ld hl,(ix+ZWIN.CURCOL)
   ld de,(ix+ZWIN.ORGCOL)
   or a,a
   sbc hl,de ; find current width of line
   
   call sfont_width ; bc = character width
   ld d,b
   ld bc,0
   ld c,d
   ; bc = character width
   
   push bc
    add hl,bc
    ld bc,(ix+ZWIN.WIDTH)
    scf
    sbc hl,bc ; new strlen - width - 1
    ccf
    call c,zwin_newline_bare ; don't buffer
    jp c,err2
    call zwin_select  ; select window for writing
    push iy
     ld iy,flags
     SYSCALL(_VPutMap) ; display char
    pop iy
   pop bc
  pop ix
  ; update current column
  ld hl,(ix+ZWIN.CURCOL)
  add hl,bc
  ld (ix+ZWIN.CURCOL),hl
  ret


;; zwin_unputc -- remove last character from window
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: a, bc
;; NOTES: erases character on screen.
zwin_unputc:
zwin_unputcursor:
  push hl \ push de
   ld hl,(ix+ZWIN.BUFPTR)
   call cp_hl_0
   jr z,zwin_unputc.done ; nothing to unput
   ex de,hl
   call zwin_buf
   jr c,zwin_unputc.done ; error
   ex de,hl
   add hl,de
   dec hl
   ld a,(hl)
   or a,a
   sbc hl,de
   ld (ix+ZWIN.BUFPTR),hl
   ld hl,(ix+ZWIN.CURCOL)
   call sfont_width
   ld d,b
   ld bc,0
   ld c,d
   or a,a
   sbc hl,bc
   ld de,(ix+ZWIN.ORGCOL)
   sbc hl,de   ; NOTE: always NC
   add hl,de
   jr z,zwin_unputc.prevline
   ld (ix+ZWIN.CURCOL),hl
   ;; clear rectangle
   ld a,(ix+ZWIN.CURROW)
   push ix
    ld ix,-ZRECT_SIZE
    add ix,sp
    ld sp,ix
    ld (ix+ZRECT.ORGCOL),hl
    ld (ix+ZRECT.ORGROW),a
    ld (ix+ZRECT.WIDTH),bc
    ld (ix+ZRECT.HEIGHT),SFONT_HEIGHT
    call zdisp_clearrect
    ld ix,ZRECT_SIZE
    add ix,sp
    ld sp,ix
   pop ix
   or a,a
zwin_unputc.done:
  pop de \ pop hl
#if ZTEST
  call nc,zwin_cksum
#endif
  ret

zwin_unputc.prevline:
   call zwin_redraw
   jr zwin_unputc.done


;; zwin_puts_c -- C wrapper for zwin_puts
;; INPUTS:
;;  arg1 = char *string
;;  arg2 = struct zwin **win
;; OUTPUTS: (none)
;; ERRORS: no.
;; DESTROYS: (all)
zwin_puts_c:
   push ix
    push iy
     ld iy,0
     add iy,sp
     ld hl,(iy+9)  ; arg1 -- string
     ld ix,(iy+12) ; arg2 -- context
     ld ix,(ix)   ; window
     push iy
     ld iy,flags
     call zwin_puts
    pop iy
    ld sp,iy
    pop iy
   pop ix
   ret


#if ZTEST
;; zwin_cksum_putc -- put char to existing window buffer cksum
;; INPUTS:
;;  ix = window pointer
;;  a = new char
;; OUTPUTS: (none)
;; DESTROYS: (none)
zwin_cksum_putc:
  jp zwin_cksum
  push hl
   ld hl,(ix+ZWIN.CKSUM)
   call djb2_putc
   ld (ix+ZWIN.CKSUM),hl
  pop hl
  ret

;; zwin_cksum_unputc -- unput char from existing window buffer cksum
;; INPUTS:
;;  ix = window pointer
;;  a = char to remove
;; OUTPUTS: (none)
;; DESTROYS: (none)
zwin_cksum_unputc:
  jp zwin_cksum

;; zwin_cksum -- checksum window contents
;; INPUTS:
;;  ix = pointer to zwin
;; OUTPUTS: (none)
;; DESTROYS: (none)
;; ERRORS: yes.
zwin_cksum:
  push hl
  push de
  push bc
  push af
   call zwin_buf
   jr c,zwin_cksum.done ; error
   ex de,hl
   ld bc,(ix+ZWIN.BUFPTR)
   ld hl,5381
   jr zwin_cksum.entry
zwin_cksum.loop:
   push bc
    push de
     LD_DE_HL
     add hl,hl
     add hl,hl
     add hl,hl
     add hl,hl
     add hl,hl
     add hl,de ; hl <- hl * 33
    pop de
    ld a,(de)
    inc de
    ld bc,0
    ld c,a
    add hl,bc
   pop bc
   dec bc
zwin_cksum.entry:
   push hl
    LD_HL_0
    or a,a
    sbc hl,bc
   pop hl
   jr nz,zwin_cksum.loop
   ld (ix+ZWIN.CKSUM),hl
   or a,a
zwin_cksum.done:
  pop bc
  ld a,b
  pop bc
  pop de
  pop hl
  ret

#endif






#endif