;; zcode.z80
;; Nicholas Mosier 2019

#ifndef ZCODE_Z80
#define ZCODE_Z80

#include "zaddr.inc"
#include "zcode.inc"
#include "util.inc"

;; zcode_decode -- decode single instruction
;; INPUTS:
;;  zframe_pc set
;; OUTPUTS: (none)
;; ERROR: yes. set CF and nonzero %a indicates error.
;; DESTROYS: (all)
;; TODO: use stack mem, not global mem.
zcode_decode:
   ; fetch first byte
   LD_BHL_FROM_ABS_ZA(zframe_pc)
   call zaddr_fetch
   ret c ; addr translation error
zcode_decode.type:
   ; determine opcode type
   cp a,ZOPCODE_EXTENDED
   jp z,zcode_decode_extended
   bit ZOPCODE_TYPE_H,a
   jp z,zcode_decode_long ; $$0x -> long
   bit ZOPCODE_TYPE_L,a
   jp z,zcode_decode_short ; $$10
   jp nz,zcode_decode_variable ; $$11
   ;--;

zcode_decode.types: .db 0

;; Each of these functions (zcode_decode_{short,long,variable})
;; decode and execute the instruction. Never called directly.
;; Upon entry, a = first byte of opcode.
zcode_decode_short:
   LD_BHL_TO_ABS_ZA(zframe_pc)
   ld c,a ; save
zcode_decode_short.operand:
   ; 4.3.1 opcode type (& count) is given by bits 4-5. $$11 = 0OP, otherwise 1OP.
   ; left-justify opcode type, then set `omitted' terminator
   rlca
   rlca
   and a,$c0 ; mask of op1 type
   cp a,$c0
   ld hl,zcode_LUT.1OP
   jr nz,_
   ld hl,zcode_LUT.0OP
_  or a,$3f ; mask in 3 omitteds
   ld (zcode_decode.types),a
zcode_decode_short.opnum:
   ; 4.3.1 opcode number given in bottom 4 bits.
   ld a,c
   and a,$0f ; opcode num
   jp zcode_decode.exec


zcode_decode_long:
   ; 4.3.2 opcode count is always 2OP
   ; 4.4.2 In long form, bit 6 of the opcode gives the type of the first operand,
   ;       bit 5 of the second. A value of 0 means a small constant and 1 means a variable.
   ld c,a
   ld a,$ff
zcode_decode_long.op1:
   bit 6,c
   jr nz,zcode_decode_long.op1_var
zcode_decode_long.op1_small:
   res 7,a
   jr zcode_decode_long.op2
zcode_decode_long.op1_var:
   res 6,a
zcode_decode_long.op2:
   bit 5,c
   jr nz,zcode_decode_long.op2_var
zcode_decode_long.op2_small:
   res 5,a
   jr zcode_decode_long.store_opinfo
zcode_decode_long.op2_var
   res 4,a
zcode_decode_long.store_opinfo
   ; store operand information
   ld (zcode_decode.types),a
   LD_BHL_TO_ABS_ZA(zframe_pc)
zcode_decode_long.opnum:
   ld a,c ; restore opcode
   and a,$1f
   ld hl,zcode_LUT.2OP ; always 2OP
   jp zcode_decode.exec
   

zcode_decode_variable:
   ; 4.3.3 if bit 5 is 0, then 2OP; otherwise VAR
   ; 4.4.3 In variable or extended forms, a byte of 4 operand types is given next.
   ;       This contains 4 2-bit fields: bits 6 and 7 are the first field, bits 0 and 1 the fourth.
   ; NOTE: does bit 5 even matter?
   ; TODO: figure out whether this even works...
   ld d,a
   call zaddr_fetch ; preserves de; hl++
   ret c
   ld (zcode_decode.types),a
   LD_BHL_TO_ABS_ZA(zframe_pc)
zcode_decode_variable.opnum:
   ld a,d
   bit 5,a
   ld hl,zcode_LUT.VAR
   jr nz,_
   ld hl,zcode_LUT.2OP
_  and a,$1f
   jp zcode_decode.exec


;; [INTERNAL] zcode_decode.exec -- look up opcode handler and execute
;; INPUTS:
;;  hl = pointer to table
;; OUTPUTS: see zexec.* functions
zcode_decode.exec:
  MLT_A(SIZEOF_ZCODE_ENT, R_DE)
  add hl,de
  ld a,(hl)
  push af
  inc hl
#if TI83PLUS
  ld b,(hl)
  inc hl
  ld h,(hl)
  ld l,b
#elif TI84PCE
  ld hl,(hl)
#endif
  ld de,zcode_decode.exec.post
  push de
  push hl     ; actually return address
  and a,ZCODE_ENT.INFO.NPARAMS
  call zop_readn
  ret nc      ; jump to handler on success
zcode_decode.exec.err3:
  pop hl      ; discard handler on error
  pop hl
  pop hl
  ret

zcode_decode.exec.post:
  pop bc
  ret c
  bit ZCODE_ENT.INFO.WRITES_VAR,b
  push bc
   call nz,zcode_decode.exec.write_var
  pop bc
  ret c
  bit ZCODE_ENT.INFO.REPBCMP,b
  push bc
   call nz,zexec_repbcmp
  pop bc
  ret c
  bit ZCODE_ENT.INFO.CJMP,b
  push bc
   call nz,zexec_cjmp
  pop bc
  ret




zcode_decode.exec.write_var:
  call zcode_readvarnum
  jp nc,zvar_store
  ret



;;-- NOT SUPPORTED --;;
;; TODO: support extended opcodes.
zcode_decode_extended:
   ld a,ZERR_NOTAVAIL
   scf
   ret c ; NOT SUPPORTED YET


;; zcode_fetch_op -- fetch operand from logical address.
;; INPUTS:
;;  hl = zaddr of operand
;;  a = operand type
;; OUTPUTS:
;;  de = operand
;;  hl points to byte after operand
;; ERRORS: yes.
;; DESTROYS: (all)
zcode_fetch_op:
   cp a,ZOP_LARGE
   jp z,zcode_fetch_op.large
   cp a,ZOP_SMALL
   jp z,zcode_fetch_op.small
   cp a,ZOP_VARIABLE
   jp z,zcode_fetch_op.variable
   jp zcode_fetch_op.omitted

zcode_fetch_op.large:
   call zaddr_fetch ; [b:hl]++
   ret c
   ld d,a
   call zaddr_fetch ; [b:hl]++
   ret c
   ld e,a
   ex de,hl
   WTOLS_HL ; upcast
   ex de,hl
   or a,a
   ret

zcode_fetch_op.small:
   call zaddr_fetch ; [b:hl]++
   ret c
   ex de,hl
   BTOLU      ; upcast
   ex de,hl
   or a,a
   ret

zcode_fetch_op.variable:
   call zaddr_fetch ; [b:h]l++
   ret c
   ; now %a contains variable no.
   ; fetch variable value
   PUSH_BHL_ZA
   call zvar_fetch ; hl++
   ex de,hl
   POP_BHL_ZA
   ; result in %de, errflg set
   ret

;; NOTE: there is no result.
zcode_fetch_op.omitted:
   or a,a
   ret
   
zcode_err.bad:
   ld a,ZERR_BADINSTR
   scf
   ret

zcode_err.notavail:
   ld a,ZERR_NOTAVAIL
   scf
   ret


;; zcode_readvarnum -- read variable number (1 byte)
;; INPUTS:
;;  zframe_pc
;; OUTPUTS:
;;  zframe_pc <- zframe_pc + 1
;;  %a contains variable number
;; ERRORS: yes.
;; DESTROYS: b
zcode_readvarnum:
  push hl
   LD_BHL_FROM_ABS_ZA(zframe_pc)
   call zaddr_fetch
   LD_BHL_TO_ABS_ZA(zframe_pc)
  pop hl
  ret

;; zcode_decode_branch -- decode branch in opcode.
;; INPUTS:
;;  [b:hl] = logical pointer to branch byte(s).
;; OUTPUTS:
;;  de = offset (raw, 24 bits, signed)
;;  [b:hl] points to logical address after branch info
;;  Z if branch when false; NZ if branch when true
;; DESTROYS: (all)
;; ERRORS: yes.
;; TODO: input needs to be long ZA.
zcode_decode_branch:
   ; 4.7 If bit 6 is set, then the branch occupies 1 byte only, and the offset
   ;     is in the range 0 to 63, given in the bottom 6 bits. If bit 6 is clear,
   ;     then the offset is a signed 14-bit number given in bits 0 to 5 of the
   ;     first byte followed by all 8 of the second.
   ld de,0
   call zaddr_fetch
   ret c
   ld c,a
   bit 6,c
   jr z,zcode_decode_branch.14bits
zcode_decode_branch.6bits:
   ; unsigned 6-bit offset
   and a,$3f ; NC
   ld e,a
   bit 7,c
   ret ; NC

zcode_decode_branch.14bits:
   ; signed 14-bit offset
   ; test sign of offset
   and a,$3f
   bit 5,a
   jr z,zcode_decode_branch.de_signed
   ; offset < 0
   dec de ; de = $ffffff
   add a,$c0 ; set 7,a; set 6,a
zcode_decode_branch.de_signed:
   ld d,a
   push bc
   call zaddr_fetch
   ex (sp),hl
   ld c,l
   pop hl
   ret c
   ld e,a
   or a,a
   bit 7,c
   ret


zcode_LUT.2OP:
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.bad       ) ; $00
   D_ZCODE_ENT(0, 0, 1, 1, zexec.je            ) ; $01
   D_ZCODE_ENT(0, 0, 1, 1, zexec.jl            ) ; $02
   D_ZCODE_ENT(0, 0, 1, 1, zexec.jg            ) ; $03
   D_ZCODE_ENT(2, 0, 0, 1, zexec.dec_chk       ) ; $04
   D_ZCODE_ENT(2, 0, 0, 1, zexec.inc_chk       ) ; $05
   D_ZCODE_ENT(0, 0, 1, 1, zexec.jin           ) ; $06
   D_ZCODE_ENT(0, 0, 1, 1, zexec.test          ) ; $07
   D_ZCODE_ENT(2, 1, 0, 0, orl                 ) ; $08
   D_ZCODE_ENT(2, 1, 0, 0, andl                ) ; $09
   D_ZCODE_ENT(0, 0, 1, 1, zexec.test_attr     ) ; $0A
   D_ZCODE_ENT(2, 0, 0, 0, zexec.set_attr      ) ; $0B
   D_ZCODE_ENT(2, 0, 0, 0, zexec.clear_attr    ) ; $0C
   D_ZCODE_ENT(2, 0, 0, 0, zexec.store         ) ; $0D
   D_ZCODE_ENT(2, 0, 0, 0, zexec.insert_obj    ) ; $0E
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.loadw   ) ; $0F
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.loadb   ) ; $10
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.propval ) ; $11
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.propaddr) ; $12
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.nextprop) ; $13
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.add     ) ; $14
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.sub     ) ; $15
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.mul     ) ; $16
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.div     ) ; $17
   D_ZCODE_ENT(2, 1, 0, 0, zexec_binop.mod     ) ; $18
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail  ) ; $19
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail  ) ; $1A
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail  ) ; $1B
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail  ) ; $1C
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.bad       ) ; $1D
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.bad       ) ; $1E
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.bad       ) ; $1F

zcode_LUT.1OP:
   D_ZCODE_ENT(0, 0, 0, 1, zexec.jz          )  ; $0
   D_ZCODE_ENT(1, 0, 0, 1, zexec.get_sibling )  ; $1
   D_ZCODE_ENT(1, 0, 0, 1, zexec.get_child   )  ; $2
   D_ZCODE_ENT(1, 1, 0, 0, zexec.get_parent  )  ; $3
   D_ZCODE_ENT(1, 1, 0, 0, zexec.get_prop_len)  ; $4
   D_ZCODE_ENT(1, 0, 0, 0, zexec.inc         )  ; $5
   D_ZCODE_ENT(1, 0, 0, 0, zexec.dec         )  ; $6
   D_ZCODE_ENT(1, 0, 0, 0, zexec.print_addr  )  ; $7
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $8
   D_ZCODE_ENT(1, 0, 0, 0, zexec.remove_obj  )  ; $9
   D_ZCODE_ENT(1, 0, 0, 0, zexec.print_obj   )  ; $A
   D_ZCODE_ENT(1, 0, 0, 0, zexec.ret         )  ; $B
   D_ZCODE_ENT(1, 0, 0, 0, zexec.jump        )  ; $C
   D_ZCODE_ENT(1, 0, 0, 0, zexec.print_paddr )  ; $D
   D_ZCODE_ENT(1, 1, 0, 0, zexec.load        )  ; $E
   D_ZCODE_ENT(1, 1, 0, 0, zexec_unop.not    )  ; $F
                    
zcode_LUT.0OP:      
   D_ZCODE_ENT(0, 0, 0, 0, zexec.rtrue       )  ; $0
   D_ZCODE_ENT(0, 0, 0, 0, zexec.rfalse      )  ; $1
   D_ZCODE_ENT(0, 0, 0, 0, zexec.print       )  ; $2
   D_ZCODE_ENT(0, 0, 0, 0, zexec.print_ret   )  ; $3
   D_ZCODE_ENT(0, 0, 0, 0, zexec.nop         )  ; $4
   D_ZCODE_ENT(0, 0, 0, 0, zexec.save        )  ; $5
   D_ZCODE_ENT(0, 0, 0, 0, zexec.restore     )  ; $6
   D_ZCODE_ENT(0, 0, 0, 0, zexec.restart     )  ; $7
   D_ZCODE_ENT(0, 0, 0, 0, zexec.ret_popped  )  ; $8
   D_ZCODE_ENT(0, 0, 0, 0, zexec.pop         )  ; $9
   D_ZCODE_ENT(0, 0, 0, 0, zexec.quit        )  ; $A
   D_ZCODE_ENT(0, 0, 0, 0, zexec.new_line    )  ; $B
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $C
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $D
                    
zcode_LUT.VAR:      
   D_ZCODE_ENT(0, 0, 0, 0, zexec.call        )  ; $00
   D_ZCODE_ENT(3, 0, 0, 0, zexec.storew      )  ; $01
   D_ZCODE_ENT(3, 0, 0, 0, zexec.storeb      )  ; $02
   D_ZCODE_ENT(3, 0, 0, 0, zexec.put_prop    )  ; $03
   D_ZCODE_ENT(2, 0, 0, 0, zexec.read        )  ; $04
   D_ZCODE_ENT(1, 0, 0, 0, zexec.print_char  )  ; $05
   D_ZCODE_ENT(1, 0, 0, 0, zexec.print_num   )  ; $06
   D_ZCODE_ENT(1, 1, 0, 0, zexec.random      )  ; $07
   D_ZCODE_ENT(1, 0, 0, 0, zexec.push        )  ; $08
   D_ZCODE_ENT(0, 0, 0, 0, zexec.pull        )  ; $09
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $0A
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $0B
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $0C
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $0D
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $0E
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $0F
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $10
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $11
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $12
   D_ZCODE_ENT(0, 0, 0, 0, zcode_err.notavail)  ; $13


#include "zexec.z80"

#endif