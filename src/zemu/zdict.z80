;; zdict.z80 -- Z-machine dictionary utility functions
#ifndef ZDICT_Z80
#define ZDICT_Z80

#include "zdict.inc"
#include "zaddr.inc"

;; zdict_addr -- get z-addr of dictionary
;; zdict_hdraddr -- get z-addr of dictionary header
;; INPUTS: (none)
;; OUTPUTS:
;;  [b:hl] = static z-addr of dictionary
;; DESTROYS: de
;; ERRORS: yes.
;; *** portable ***
zdict_addr:
zdict_hdraddr:
  LD_BHL_IMM(ZHDR_DICT)
  call zaddr_fetchwu
  ex de,hl
#if TI83PLUS
  ld b,0
#endif
  ret

;; zdict_tab -- get info about dictionary table
;; INPUTS: (none)
;; OUTPUTS:
;;  [b:hl] = static z-addr of dictionary table (points to first entry)
;;  a = entry size
;;  de = number of entries
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zdict_tab:
   call zdict_addr
   call nc,zaddr_fetch ; number of separators
   ret c
   UCAST_A_TO_DE
   add hl,de
   UCAST_HL_TO_BHL_ZA
   call nc,zaddr_fetch ; entry size
   jp zaddr_fetchwu ; number of entries


;; zdict_search -- search for Z-string in dictionary
;; INPUTS:
;;  hl = p-addr to (4-byte / 2-word) Z-string
;; OUTPUTS:
;;  a = 0 on success; a != 0 if error
;;  [b:hl] = static Z-addr of entry, if found
;;  C if not found -- check for error in this case
;;  NC if found -- don't need to check for error
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zdict_search:
  push hl ; save key
  call zdict_tab
  pop bc  ; restore key
  ;; hl = base
  ;; de = number of elements
  ;; bc = key
  ;; a = element size
  ;; ix = compare
  ld ix,zdict_search.cmp ; comp
  call nc,bsearch
  UCAST_DE_TO_CDE_ZA
  ret


;; hl = key
;; de = val
zdict_search.cmp:
   ld b,ZDICT_WORDLEN
   push ix
   push hl
   push de
   UCAST_DE_TO_CDE_ZA
   call pmemcmpz_b
   pop de
   pop hl
   pop ix
   ld a,0
   ret

#endif