;; zdisp.z80 -- display routines

#ifndef ZDISP_Z80
#define ZDISP_Z80

#include "zdisp.inc"
#include "zti.inc"

#if TI84PCE
#include "ti84pce/zdisp.z80"
#endif
#if TI83PLUS
#include "ti83plus/zdisp.z80"
#endif

;; sfont_width -- get width of small font character
;; INPUTS:
;;  a = character
;; OUTPUTS:
;;  bc = width of character
;; DESTROYS: (none)
;; ERRORS: no.
sfont_width:
   push hl
   push de
   MLT_A(SFONT_TAB_ENTLEN, R_HL)
   SYSCALL(_SFont_Len)
#if TI84PCE
   push af
   ld a,b
   UCAST_A_TO_BC
   pop af
#elif TI83PLUS
   ld c,b
   ld b,0
#endif
   pop de
   pop hl
   ret

;; zdisp_scrollrect_up -- shift rectangle upwards in VRAM
;; INPUTS:
;;  ix = rectangle
;;  a = upward shift (in pixels)
;; OUTPUTS: ???
;; ERRORS: no.
;; *** portable ***
zdisp_scrollrect_up:
   call zdisp_scrollrect_up.copy
   call zdisp_scrollrect_up.clear
   ret



;; zdisp_scrollrect_up.clear -- clear rectangle after scrolling up
;; INPUTS:
;;  ix = rectangle
;;  a = upward shift (in pixels)
;; OUTPUTS:
;;  ix = rectangle
;;  a = upward shift
;; ERRORS: no.
;; DESTROYS: (all)
;; *** portable ***
zdisp_scrollrect_up.clear:
   ;; clear lower rectangle that will be exposed by scroll
   ;; initialize clear-rect
   push af
   push ix
   LD_HL_IX
   ld ix,-ZRECT_SIZE
   add ix,sp
   ld sp,ix
   LD_DE_IX
   ld bc,ZRECT_SIZE
   ldir
   ld b,a
   ld c,(ix+ZRECT.HEIGHT)
   ;; clear-rect.height <- min(upward-shift, rect-height)
   cp a,c   ; flags(shift - rect.height)
   jr c,_
   ld a,c
_  ld (ix+ZRECT.HEIGHT),a  ; save clear-rect.height
   ;; clear-rect.orgrow <- rect.orgrow + rect.height - clear-rect.height
   neg
   add a,c
   add a,(ix+ZRECT.ORGROW)
   ld (ix+ZRECT.ORGROW),a  ; save clear-rect.orgrow
   ;; NOTE: orgcol and width stay the same.
   call zdisp_clearrect
#if 0
   _LEA_HL_IX(ZRECT_SIZE)
#else
   ld hl,ZRECT_SIZE
   add hl,sp
#endif
   ld sp,hl
   pop ix
   pop af
   ret

#include "zti.z80" ; for _LEA_HL_IX

#endif