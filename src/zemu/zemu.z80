#include "zti.inc"
#include "zemu.inc"
#include "zhdr.inc"
#include "zutil.inc"
#include "zwin.inc"
#include "zhex.inc"

#if TI84PCE
.assume ADL=1
#endif

.org userMem-2

#if TI83PLUS
.db t2ByteTok, tAsmCmp
#elif TI84PCE
.db tExtTok, tAsm84CeCmp
#endif

start:
   call zdisp_init
   call zrand_init
#ifdef ZDBG
   call zdbg_init
#endif
   call init_windows

   ; clear screen & reset cursor
   ; no scrolling for now
   res appAutoScroll,(iy+appFlags)  ; TODO: is this necessary?

#if ZSELECT_GAME
   ld hl,-VARNAMELEN
   add hl,sp
   ld sp,hl
   call zemu_selectgame
   call nc,zemu_open ; open story file
   rla                ; preserve error state in bit 0 of a
   ld hl,VARNAMELEN
   add hl,sp
   ld sp,hl
   rra
#else
   ld hl,storyname
   call zemu_open
#endif
   ; ret c
   ld hl,zemu_open_str
   jp c,zemu_perror
   call zmem_init ; initialize memory
   ld hl,zmem_init_str
   jp c,zemu_perror

#ifndef ZDBG
   call zcpu_init
   call nc,zcpu_run
#else
   call zdbg_init
   call zdbg_run
#endif
   ld hl,zemu_str
   jp c,zemu_perror
   ret

zemu_str: .db "zemu",0

;; initialize windows
init_windows:
   ld ix,win_main
   call zwin_init

#if ZDBG
   push iy
   
   ld iy,win_dbgout
   ld a,SFONT_HEIGHT*2
   ld b,0 ; don't buffer
   call zwin_split_bottom

   ld iy,win_dbgin
   ld a,SFONT_HEIGHT
   ld b,MASK(ZWIN.FLAGS.BUFD)
   call zwin_split_bottom

   ld iy,win_dbg1
   ld hl,100
   ld b,MASK(ZWIN.FLAGS.BUFD)|MASK(ZWIN.FLAGS.PAGD) ; don't buffer
   call zwin_split_right

   ld ix,win_dbg1
   ld iy,win_dbg2
   ld a,80
   ld b,0 ; don't buffer
   call zwin_split_bottom

   ld ix,win_dbgin
   call zwin_init

   ld ix,win_dbg1
   call zwin_init
   call zwin_page

   ld ix,win_dbg2
   call zwin_init
   call zwin_page

   pop iy
#endif
   ret

;; main window's buffer is alloacted at runtime
win_main: D_ZWIN(2, 2, DISP_WIDTH-4, DISP_HEIGHT-4, MASK(ZWIN.FLAGS.BUFD), win_main.buflen, "ZEMUWIN")
#if ZTEST
win_main.cksum .equ win_main + ZWIN.CKSUM
#endif
win_main.bufanc .equ win_main + ZWIN.BUFANC


#ifdef ZDBG
win_dbgout: RES_ZWIN ; not buffered
win_dbgin:  D_ZWIN(0, 0, 0, 0, 0, WIN_DBGIN_BUFSIZE, "ZDBGWIN") ; buffered
; win_dbg1:   RES_ZWIN ; not buffered
win_dbg1:   D_ZWIN(0, 0, 0, 0, MASK(ZWIN.FLAGS.PAGD), 64, "ZDBG1W")
win_dbg2:   D_ZWIN(0, 0, 0, 0, MASK(ZWIN.FLAGS.PAGD), 64, "ZDBG2W")
#endif


zemu_open_str: .db "zemu_open",0
zmem_init_str: .db "zmem_init",0

; zemu_open -- open zemu story file
; INPUTS:
;  - hl = name of story file's canonical zmap
; OUTPUTS:
;  zemu_appvar, zemu_header, zemu_table set
; DESTROYS: (all)
zemu_open:
   call zmap_load
   jp nc,zhdr_defaults
   ret   
   
;; zemu_cleanup -- cleanup in preparation for exit
zemu_cleanup:
  or a,a
  ret


;; zemu_selectgame -- choose game to play
;; INPUTS:
;;  hl = name buffer
;;  bc = size of buffer 
;; OUTPUTS:
;;  name of game put in buffer
;; ERRORS: yes.
;; DESTROYS: all but hl
#if ZSELECT_GAME
zemu_selectgame:
   ld ix,win_main
   ;; display prompt
   push hl
   ld hl,zemu_prompt_game
   call zwin_puts_bare
   pop hl
   call zwin_getsn
   ret c       ; ERROR
   ;; strip trailing newline
   push hl
   ld a,ASCII_NEWLINE
   call strchr
   ld (hl),0
   pop hl
   or a,a      ; SUCCESS
   ret
#endif

storyname: .db ZSTORYNAME,0

;;;;;;;;;;;;;
;; GLOBALS ;;
;;;;;;;;;;;;;

#if ZSELECT_GAME
;; story_name -- name of current story (max of STORY_NAME_MAXLEN) bytes
story_name: RESB(STORY_NAME_MAXLEN)
zemu_prompt_game: .db "Story name: ",0
#endif

;;; OTHER SOURCES ;;;
#include "zaddr.z80"
#include "zbranch.z80"
#include "zcall.z80"
#include "zcode.z80"
#include "zcpu.z80"
#include "zdbg.z80"
#include "zdict.z80"
#include "zdisp.z80"
#include "zerr.z80"
#include "zexec.z80"
#include "zhdr.z80"
#include "zin.z80"
#include "zmap.z80"
#include "zmem.z80"
#include "zname.z80"
#include "zobj.z80"
#include "zop.z80"
#include "zrand.z80"
#include "zsave.z80"
#include "zstr.z80"
#include "zutil.z80"
#include "zvar.z80"
#include "zwin.z80"
#include "zti.z80"
#include "util.z80"
#include "zfile.z80"