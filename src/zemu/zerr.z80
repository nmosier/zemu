;; zerr.z80
;; *** portable ***

#ifndef ZERR_Z80
#define ZERR_Z80

#include "zerr.inc"

#if ZERREXTERN
zerr_tabfile: D_FILE("ZEMUERR",0)
#else
#include "zerrtab.z80"
#endif

;; zemu_perror -- print error message given zerror code.
;; INPUTS:
;;  a = zerror code
;;  hl = string
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; NOTE: zemu_perror always sets the carry flag to indicate
;;  error condition. This doesn't mean that zemu_perror failed
;;  (it can't fail), but it is rather for convenience so that
;;  error-handling code can jump to zemu_perror without having
;;  to set the carry flag after calling zemu_perror.
;; *** portable ***
zemu_perror:
   ld ix,win_main
   push af
    call cp_hl_0
    jr z,zemu_perror.bare
    call zwin_puts
    ld hl,zemu_perror.sep
    call zwin_puts
    jr zemu_perror.bare
zemu_perror.done:
   scf
   ret
zemu_perror.sep: .db ": ",0

zemu_perror.bare:
   pop af
   push ix
    call zemu_strerror
   pop ix
   call zwin_puts
   jr zemu_perror.done


zemu_perror_sep: .db ": ",0

;; zemu_strerror -- return error string given error code.
;; INPUTS:
;;  a = zerror code
;; OUTPUTS:
;;  hl = error string (null-terminated)
;;  CF is set
;; DESTROYS: (all), ix
;; *** portable ***
zemu_strerror:
#if ZERREXTERN
  MLT_A(WORD_SIZE, R_DE)
  push ix
   ld ix,zerr_tabfile
   CLEAR_UPPER_HL
   ld l,(ix+FILE.SIZE)
   ld h,(ix+FILE.SIZE+1)
   call cp_hl_0
   call z,file_open
   LD_HL_0
   call nc,file_addr
  pop ix
  jr c,zerr_fallback
  ex de,hl
  add hl,de
  CLEAR_UPPER_BC
  ld c,(hl)
  inc hl
  ld b,(hl)
  ex de,hl
  add hl,bc
  scf
  ret
#else
   MLT_A(LONG_SIZE, R_DE)
   ld ix,zerrtab
   add ix,de
   LD_HL_FROM_IX(0)
   scf
   ret
#endif


#if ZERREXTERN

;; zerr_fallback -- return string of numeric error code
;; INPUTS:
;;  a = error code
;; OUTPUTS:
;;  hl = temporary buffer containing error code string
;; DESTROYS: (all)
zerr_fallback:
  ld hl,zerr_fallback.buf+1
  ld b,a
  and a,$0f
  call xtoc
  ld (hl),a
  dec hl
  ld a,b
  rrca
  rrca
  rrca
  rrca
  and a,$0f
  call xtoc
  ld (hl),a
  ret  

zerr_fallback.buf: .db 0,0,0

#endif

#include "util.z80"
#include "zwin.z80"

#endif