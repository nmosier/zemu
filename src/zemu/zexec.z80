#ifndef ZEXEC_Z80
#define ZEXEC_Z80

#include "util.inc"
#include "zaddr.inc"

;; TODO: create table for zexec.* to reduce code size

;; NOTE: each zexec.* function expects operands to be set properly
;;       and to have %a hold the relevant opcode.

;; zexec_cmp.* -- comparison function
;; INPUTS:
;;  hl = lhs
;;  de = rhs
;; OUTPUTS:
;;  a = 0 if false; a == $ff if true
;; DESTROYS: (all)
;; ERRORS: yes.

;; hl == de ?
zexec_cmp.eq:
   call cp_hl_de;_sgn
   ld a,$FF
   ret z
   xor a,a
   ret

;; hl < de ?
zexec_cmp.lt:
   call cp_hl_de;_sgn
   scf \ ccf
   ld a,0
   ret p ; S flag reset, so (hl-de) is non-negative, so hl >= de
   dec a ; ld a,$ff
   ret

;; hl > de ?
zexec_cmp.gt:
   ex de,hl
   jp zexec_cmp.lt

;; (hl & de) == hl ?
zexec_cmp.tst:
   push de
   call zexec_binop.and
   pop de
   or a,a
   sbc hl,de
   ld a,$FF
   jr z,zexec_cmp.tst.clr
   xor a,a
zexec_cmp.tst.clr:
   or a,a
   ret

;; obj(de) is parent of obj(hl) ?
;; TODO: Should this return false if either is 0?
zexec_cmp.in:
   ;; check if either parameter is 0; if so, return FALSE
   xor a,a     ; ld a,0
   call cp_hl_0
   ret z
   ex de,hl
   call cp_hl_0
   ex de,hl
   ret z
   ;; both objects are valid, so continue
   call zobj_downcast
   push de
   call nc,zobj_parent
   pop hl
   ld b,a ; save actual parent
   call nc,zobj_downcast
   ret c
   cp a,b
   ld a,$ff
   ret z ; NC
   xor a,a
   ret   ; NC

;; does obj(hl) have attribute attr(de)?
;; TODO -- should perform downcasting checks.
zexec_cmp.attr:
   ex de,hl
   call zobj_downcast
   ld c,a
   ex de,hl
   call nc,zobj_downcast
   call nc,zobj_attrtest ; sets flags properly
   ret c
   ld a,0
   ret z
   dec a ; ld a,$ff
   ret

;-----------------------;
;    unary comparisons  ;
;-----------------------;
zexec_cmp.zero:
   xor a,a
   call cp_hl_0
   ; NOTE: CF reset always
   ret nz
   cpl
   ret

zexec_cmp.nonzero:
   call zexec_cmp.zero
   cpl
   ret

;---------------------------;
;   unary operations        ;
;---------------------------;
; zexec_unop.* -- modification function
; INPUTS:
;  hl = value (24-bit, signed)
; OUTPUTS:
;  hl = modified value (24-bit, signed)
; DESTROYS: (all)
; ERRORS: no.

zexec_unop.inc:
   inc hl
   scf \ ccf
   ret

zexec_unop.dec:
   dec hl
   scf \ ccf
   ret

zexec_unop.not:
  ex de,hl
  scf
  sbc hl,hl ; hl <- -1
  sbc hl,de ; NC
  ret

;---------------------------;
;     behavior functions    ;
;---------------------------;

;; zexec_binop.* -- binary operations
;; INPUTS:
;;  hl = lhs
;;  de = rhs
;; OUTPUTS:
;;  hl = result
;; DESTROYS: (all)
;; ERRORS: yes.

zexec_binop.or:
  call orl
  or a,a
  ret

zexec_binop.and:
   call andl
   or a,a
   ret

zexec_binop.add:
   add hl,de
   or a,a
   ret

zexec_binop.sub:
   or a,a
   sbc hl,de
   or a,a
   ret

zexec_binop.mul:
   call mul_hl_de
   or a,a
   ret

zexec_binop.div:
   call div_hl_de ; TODO: currently doesn't report div-by-zero error 
   or a,a
   ret

zexec_binop.mod:
   call div_hl_de
   ex de,hl
   or a,a
   ret

zexec_binop.loadw:
   ; NOTE: pretend args are unsigned. (???)
   ;; hl = array
   ;; de = word-index
   add hl,de
   add hl,de ; hl <- hl + 2*de
   ;; NOTE: stored in big-endian order.
   LTOWU_HL ; downcast
   UCAST_HL_TO_BHL_ZA
   call zaddr_fetchw
   ex de,hl
   ret
   
zexec_binop.loadb:
   ;; hl = array
   ;; de = byte-index
   UCAST_HL_TO_BHL_ZA
   UCAST_DE_TO_CDE_ZA
   ADD_BHL_CDE_ZA
   call zaddr_fetch
   ret c
   call btolu
   or a,a
   ret

zexec_binop.propval:
   ;; hl = object number
   ;; de = property number
   ex de,hl
   call zobj_downcast
   ret c
   ld c,a
   ex de,hl
   call zobj_downcast
   ret c
   call zobj_propval
   ex de,hl
   ret

zexec_binop.propaddr:
   ;; hl = object number
   ;; de = property number
   ex de,hl
   call zobj_downcast
   ld c,a
   ex de,hl
   call nc,zobj_downcast
   jp nc, zobj_propaddr
   ret
   
zexec_binop.propsize:
   ;; hl = object number
   ;; de = property number
   ld a,l
   ld c,e
   call zobj_propaddr
   ret c
   UCAST_A_TO_HL
   ret

zexec_binop.nextprop:
   ;; hl = object
   ;; de = property
   ;; TODO -- downcast properly.
   ld c,e
   ld a,l
   call zobj_nextprop
   ret c
   call btols
   or a,a
   ret

;----------------------------------;
;     variable arg functions       ;
;----------------------------------;

;; zexec_repbcmp -- repeat binary comparison for variable number of arguments
;; INPUTS:
;;  hl = comparison function
;; OUTPUTS:
;;  a = truth value of comparison
;; ERROR: yes.
;; DESTROYS: (all), ix
;; TODO: Use stack, not global mem.
zexec_repbcmp:
   ld (zexec_repcmp.cmp),hl ; save comparison function
   ld a,1
   call zop_readn
   ret c ; require at least one argument
   ld (zexec_repbcmp.lhs),hl
   xor a,a
   jr zexec_repbcmp.entry
zexec_repbcmp.loop:
   ex de,hl
   ld hl,(zexec_repbcmp.lhs)
   or a,a                    ; NC
   call z,zexec_repcmp.call ; perform comparison (only if truth-value is still FALSE)
   ret c
zexec_repbcmp.entry:
   push af  ; preserve truth-value
   call zcode_readop
   pop bc
   ld a,b   ; restore truth-value
   ret c    
   jr nz,zexec_repbcmp.loop
zexec_repbcmp.done:
   or a,a
   ret
   
zexec_repbcmp.lhs: DL 0

;; zexec_repucmp -- repeat unary comparison for variable number of arguments
;; INPUTS:
;;  hl = comparison function
;; OUTPUTS:
;;  a = truth value of comparison
;; ERRORS: yes.
;; DESTROYS: (all), ix
zexec_repucmp:
   ld (zexec_repcmp.cmp),hl ; save comparison function
   xor a,a
   jr zexec_repucmp.entry
zexec_repucmp.loop:
   or a,a
   call z,zexec_repcmp.call   ; compare iff truth-value is still FALSE
   ret c
zexec_repucmp.entry:
   push af  ; preserve truth-value
   call zcode_readop
   pop bc
   ld a,b   ; restore truth-value
   ret c
   jr nz,zexec_repucmp.loop
zexec_repucmp.done:
   ret

;; shared
zexec_repcmp.call:
   ld ix,(zexec_repcmp.cmp)
   jp (ix)

zexec_repcmp.cmp: DL 0


;------------------------------------;
;           opcode handlers          ;
;------------------------------------;
;; INPUT:
;;  zcode_decode.types, zcode_decode.op_laddr set
;;  zframe_pc set
;; OUTPUT:
;; DESTROYS:
;; ERRORS: yes.

;-------------------------;
;         2 OP            ;
;-------------------------;

zexec.je:
   ld hl,zexec_cmp.eq
   call zexec_repbcmp
   jp nc,zexec_cjmp
   ret

zexec.jl:
   ld hl,zexec_cmp.lt
   call zexec_repbcmp
   jp nc,zexec_cjmp
   ret

zexec.jg:
   ld hl,zexec_cmp.gt
   call zexec_repbcmp
   jp nc,zexec_cjmp
   ret

zexec.dec_chk:
   call zvar_downcast
   ld hl,zexec_unop.dec
   push de
   call zvar_modify
   pop de
   call nc,zexec_cmp.lt
   jp nc,zexec_cjmp
   ret

zexec.inc_chk:
   call zvar_downcast
   ld hl,zexec_unop.inc
   push de
   call zvar_modify
   pop de
   call nc,zexec_cmp.gt
   jp nc,zexec_cjmp
   ret

zexec.jin:
   ld hl,zexec_cmp.in
   call zexec_repbcmp
   jp nc,zexec_cjmp
   ret

zexec.test:
   ld hl,zexec_cmp.tst
   call zexec_repbcmp
   jp nc,zexec_cjmp
   ret

zexec.or:
   call zexec_binop.or
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.and:
   call zexec_binop.and
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.test_attr:
   ld hl,zexec_cmp.attr
   call zexec_repbcmp
   jp nc,zexec_cjmp
   ret

zexec.set_attr:
   ;; TODO -- obj downcast
   ld a,l
   ld c,e
   jp zobj_attrset

zexec.clear_attr:
   ;; TODO -- obj downcast
   ld a,l
   ld c,e
   jp zobj_attrclear

zexec.store:
   call zvar_downcast
   ex de,hl
   jp zvar_store

zexec.insert_obj:
   ;; TODO -- obj downcast
   ld a,l
   ld c,e
   jp zobj_insert

zexec.loadw:
   call zexec_binop.loadw
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.loadb:
   call zexec_binop.loadb
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.get_prop:
   call zexec_binop.propval
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.get_prop_addr:
   call zexec_binop.propaddr
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.get_next_prop:
   call zexec_binop.nextprop
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.add:
   call zexec_binop.add
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.sub:
   call zexec_binop.sub
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.mul:
   call zexec_binop.mul
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.div:
   call zexec_binop.div
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.mod:
   call zexec_binop.mod
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

;; 4 -- zexec.call_2s
;; 5 -- zexec.call_2n
;; 5 -- set_colour
;; 6 -- throw


;--------------------;
;        1 OP        ;
;--------------------;
zexec.jz:
   ld hl,zexec_cmp.zero
   call zexec_repucmp
   jp nc,zexec_cjmp
   ret

zexec.get_sibling:
   ;; TODO -- obj downcast
   ld a,l
   call zobj_sibling
   call nc,btolu ; upcast obj val
   call nc,zcode_readvarnum
   push hl
   call nc,zvar_store
   pop hl
   call nc,zexec_cmp.nonzero
   call nc,zexec_cjmp
   ret

zexec.get_child:
   ;; TODO -- obj downcast
   ld a,l
   call zobj_child
   call nc,btolu ; upcast obj val
   call nc,zcode_readvarnum
   push hl
   call nc,zvar_store
   pop hl
   call nc,zexec_cmp.nonzero
   call nc,zexec_cjmp
   ret

zexec.get_parent:
   ;; TODO -- obj downcast
   ld a,l
   call zobj_parent
   call nc,btolu
   call nc,zcode_readvarnum
   call nc,zvar_store
   ret

zexec.get_prop_len:
   ;; TODO -- does this handle case when addr = 0? (Should return 0.)
   ;; NOTE -- this is an address, not an obj/prop number.
   UCAST_HL_TO_BHL_ZA
   DEC_BHL_ZA
   call zaddr_fetch
   ret c
   call zobj_propid_to_size
   call btolu
   call zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.inc:
   ;; TODO -- obj downcast
   ld a,l
   ld hl,zexec_unop.inc
   jp zvar_modify
   ret

zexec.dec:
   ;; TODO -- obj downcast
   ld a,l
   ld hl,zexec_unop.dec
   jp zvar_modify
   ret

zexec.print_addr:
   ;; cast op back to unsigned
   LTOWU_HL
   UCAST_HL_TO_BHL_ZA
   ld ix,win_main
   jp zstr_puts


;; 4 -- zexec.call_1s

zexec.remove_obj:
   ;; TODO -- obj downcast
   ld a,l
   jp zobj_remove
   ret

zexec.print_obj:
  ;; TODO -- obj downcast
  ld a,l
  push bc
   call zobj_objaddr
   LD_IX_HL
  pop bc
  ret c
  LEA_HL_IX(ZOBJ_O_PROPS)
  UCAST_HL_TO_BHL_ZA
  call zaddr_fetchz
  ex de,hl
#if TI83PLUS
  ld b,c
#endif
  INC_BHL_ZA ; skip length byte
  ld ix,win_main
  jp zstr_puts

zexec.ret:
  ld a,(zframe_rv)
  push hl
   call zstack_leave ; %a preserved
  pop hl
  jp nc,zvar_store
  ret

zexec.jump:
   ;; NOTE -- this is encoded differently from a branch instruction.
   SCAST_HL_TO_BHL_ZA
   LD_CDE_FROM_ABS_ZA(zframe_pc)
   ADD_BHL_CDE_ZA
   DEC_BHL_ZA
   DEC_BHL_ZA
   LD_BHL_TO_ABS_ZA(zframe_pc)
   or a,a ; NC
   ret

zexec.print_paddr:
   LTOWU_HL
   call zaddr_unpack
   ld ix,win_main
   jp zstr_puts

zexec.load:
   call zvar_downcast
   call zvar_fetch
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret

zexec.not:
   call zexec_unop.not
   call nc,zcode_readvarnum
   jp nc,zvar_store
   ret


;------------------------------------;
;             0OP opcodes            ;
;------------------------------------;
zexec.rtrue:
   ld a,(zframe_rv)
   call zstack_leave ; %a preserved
   ld hl,ZTRUE
   jp nc,zvar_store
   ret

zexec.rfalse:
   ld a,(zframe_rv)
   call zstack_leave ; %a preserved
   ld hl,ZFALSE
   jp nc,zvar_store
   ret

zexec.print:
   call zstr_reset
   LD_BHL_FROM_ABS_ZA(zframe_pc)
   ld ix,win_main
   call zstr_puts
   LD_BHL_TO_ABS_ZA(zframe_pc)
   ret

zexec.print_ret:
   call zexec.print
   ld ix,win_main
   call nc,zstr_putln
   jp nc,zexec.rtrue
   ret

zexec.nop:
   or a,a
   ret

;; TODO -- this doesn't actually check if the save succeeds.
zexec.save:
  ld a,$ff                    ; preemptively declare the SAVE a success!
  call zexec_cjmp
  ld hl,zexec.save.name
  call zsave_save
  ld hl,zexec.save.errmsg
  call c,zemu_perror
  or a,a
  ret
zexec.save.name: .db "SAVE",0
zexec.save.errmsg: .db "save",0

zexec.restore:
   ld hl,zexec.save.name
   call zsave_restore
   ret nc ; restore successful
   jp zexec_cjmp

zexec.restart:
   ld hl,zmap_name_canonical
   jp zsave_restart

zexec.ret_popped:
   ld a,ZVAR_STACK
   call zvar_fetch
   ret c
   ld a,(zframe_rv)
   push hl
   call zstack_leave ; %a preserved
   pop hl
   ret c
   jp zvar_store

zexec.pop:
   ld a,ZVAR_STACK
   jp zvar_fetch 

zexec.quit:
   xor a,a
   scf
   ret

zexec.new_line:
   ld ix,win_main
   call zstr_putln
   or a,a
   ret

zexec.show_status:
   ld a,ZERR_BADINSTR
   scf
   ret
   
zexec.verify:
   ld a,ZERR_BADINSTR
   scf
   ret

;------------------------------------;
;           VAR opcodes              ;
;------------------------------------;

;; OPTIM: can optimize how frame is set up. Rather than copying locals to tmp location, do it in
;;        the right order to begin with.
zexec.call:
  ;; NOTE: 6.4.4 Arguments are written onto local variables.
  ;; read packed address of routine
  call zcode_readop_force
  ret c
  WTOLU_HL
  ;; read parameters into locals
  push hl ; save packed address for after we've read in the params
   call zexec.call.readvars
   ;; read return value
   push bc
    call nc,zcode_readvarnum
   pop bc
  pop hl
  ret c
  ;; check if CALL address is 0 -- if so, call nothing and put false in return variable
  call cp_hl_0
  jp z,zvar_store   ; this is a trick -- ZFALSE == 0000 == NULLFN
  ;; set up bare call state
  ld c,a ; save return varno
  push bc
   call zcall0
  pop bc
  ret c
  ld a,c
  ld (zframe_rv),a ; save return value
  push hl ; save new address
   call zexec.call.storevars
  pop hl ; restore new address
  ret c
zexec.call.done:
  ld ix,(zframe_fp)
  ex de,hl
  call zstack_begin
  ex de,hl
  ret c
  add ix,de
  LD_CDE_FROM_ABS_ZA(zframe_pc) ; end of CALL instruction
  LD_CDE_TO_IX_ZA(zframe_pc-zframe_end) ; save return address
  LD_BHL_TO_ABS_ZA(zframe_pc) ; save new PC
  or a,a
  ret

;; get variables before setting up new call frame
zexec.call.readvars:
  ld de,zexec.call.locals ; locals are temporarily stored here
  or a,a
  jr zexec.call.readvars.entry
zexec.call.readvars.loop:
  ex de,hl
  ld (hl),d
  inc hl
  ld (hl),e
  inc hl
  ex de,hl
zexec.call.readvars.entry:
  push de
   call zcode_readop
  pop de
  ret c ; error
  jr nz,zexec.call.readvars.loop
zexec.call.readvars.done:
  ex de,hl
  ld de,zexec.call.locals
  or a,a
  sbc hl,de
  ld b,l
  rr b ; b = # of locals
  or a,a ; NC
  ret

;; store variables after setting up new call frame
;; b = # of vars
zexec.call.storevars:
  ld hl,zexec.call.locals
  UCAST_B_TO_DE
  add hl,de
  add hl,de
  ld a,(zframe_nl)
  cp a,b
  jr nc,_
  ld b,a
_ ld a,b
  or a,a
  ret z ; no vars to store
zexec.call.storevars.loop:
  ld a,b
  CLEAR_UPPER_DE
  dec hl
  ld e,(hl)
  dec hl
  ld d,(hl)
  push hl
   ex de,hl
   call zvar_store
  pop hl
  ret c
  djnz zexec.call.storevars.loop
  ret

zexec.call.locals: RESW(16) ; 16 = max # of locals

zexec.storew:
   ;; stores the given value in the word at address array+2*word-index
   ;; NOTE: unknown whether word-index is signed or unsigned.
   ; hl = array
   ; de = word-index
   ; bc = value
   WTOLU_HL
   ex de,hl
   WTOLU_HL
   add hl,hl ; word-index *= 2
   add hl,de ; hl = address of word to store in
   ; move value into de
   ld d,b
   ld e,c
   UCAST_HL_TO_BHL_ZA
   jp zaddr_storew
   
zexec.storeb:
   ;; stores the given value in the byte at address array+byte-index
   ;; NOTE: unknown whether byte-index is signed or unsigned.
   ; hl = array
   ; de = byte-index
   ; bc = value
   WTOLU_HL
   ex de,hl
   WTOLU_HL
   add hl,de ; byte address
   ld a,c
   UCAST_HL_TO_BHL_ZA
   jp zaddr_store
   
zexec.put_prop:
   ;; put_prop object property value
   ; hl = object
   ; de = property
   ; bc = value
   ld a,l ; object
   ld c,e ; property
   push bc
   call zobj_propaddr
   pop de
   ret c
   cp a,3
   jr nc,zexec.put_prop.err
   cp a,1
   ; 1 byte?
   ld a,e
   jp z,zaddr_store
   ; 2 bytes?
   jp nc,zaddr_storew
   ; 0 bytes?
   ret
zexec.put_prop.err:
   ld a,ZERR_BADPROP
   scf
   ret

zexec.read:
   UCAST_HL_TO_BHL_ZA
   UCAST_DE_TO_CDE_ZA
   jp zin_read ; read text into buffer

zexec.print_char:
   call ltobu     ; downcast to byte
   ld ix,win_main
   jp nc,zstr_putcode
   ret               ; ERROR

;; print_num -- print signed number in decimal
zexec.print_num:
   ld ix,win_main
   jp zstr_putn

zexec.random:
   call sgnl
   jr c,zexec.random.seed
   call cp_hl_0
   jr z,zexec.random.newseed
zexec.random.gen:
   call zrand_gen
zexec.random.store:
   call zcode_readvarnum
   jp nc,zvar_store
   ret ; ERROR

zexec.random.newseed:
   call zrand_newseed
zexec.random.seed:
   call zrand_seed
   jr zexec.random.store

zexec.push:
   ld a,ZVAR_STACK
   jp zvar_store

zexec.pull:
   ld a,ZVAR_STACK
   call zvar_fetch ; pop val off stack
   push hl
   ; get variable number destination
   ld a,1
   call nc,zop_readn
   ld a,l ; variable number
   pop hl
   jp nc,zvar_store
   ret
   
zexec.split_window:

zexec.set_window:

zexec.output_stream:

zexec.input_stream:

zexec.sound_effect:

#include "zop.z80"
#include "util.z80"
#include "zobj.z80"
#include "zaddr.z80"
#include "zbranch.z80"
#include "zvar.z80"
#include "util.z80"

#endif