#ifndef ZFILE_Z80
#define ZFILE_Z80

#include "zfile.inc"
#include "zti.inc"

;; file_open -- open existing file
;; INPUTS:
;;  ix = file struct, with name field populated
;; OUTPUTS: (none)
;; DESTROYS: (none)
;; ERRORS: yes.
file_open:
  ld hl,0
  call file_addr
  ret c
  ;; populate size field
  dec hl
  ld a,(hl)
  ld (ix+FILE.SIZE+1),a
  dec hl
  ld a,(hl)
  ld (ix+FILE.SIZE),a
  ret


;; file_create -- create file of given size, removing an existing file of the same name
;; INPUTS:
;;  ix = file struct, with name field and size populated
;; OUTPUTS:
;;  [INTERNAL] de = pointer to appvar data (skips size bytes)
;; DESTROYS: all but ix
;; ERRORS: yes.
file_create:
  LEA_HL_IX(FILE.NAME)
  call appvar_to_OP1
  SYSCALL(_ChkFindSym)
  jr c,file_create.create
  SYSCALL(_DelVarArc)
file_create.create:
  SYSERR_PUSH(file_error.nomem) ; destroys hl
  CLEAR_UPPER_HL
  ld l,(ix+FILE.SIZE)
  ld h,(ix+FILE.SIZE+1)
  SYSCALL(_CreateAppVar)
  SYSERR_POP
  inc de \ inc de ; skip size bytes
  or a,a
  ret


;; file_write -- write byte to file
;; INPUTS:
;;  ix = file struct
;;  hl = offset into file
;;  a = byte
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
file_write:
  push af
  push hl
  call file_to_RAM
  pop hl
  pop bc
  ret c
  add hl,de
  ld (hl),b
  ret
  

;; file_copy -- copy file
;; INPUTS:
;;  ix = source file struct
;;  iy = destination file struct
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
file_copy:
  ;; copy size bytes
  ld a,(ix+FILE.SIZE)
  ld (iy+FILE.SIZE),a
  ld a,(ix+FILE.SIZE+1)
  ld (iy+FILE.SIZE+1),a
  push iy
  ex (sp),ix
  ;; create new file
  call file_create
  pop ix
  ret c
  sbc hl,hl ; ld hl,0
  push de ; save dst data ptr
  call file_addr
  pop de
  ret c
#if TI83PLUS
  ld a,b
#endif
  ld c,(ix+FILE.SIZE)
  ld b,(ix+FILE.SIZE+1)
#if TI83PLUS
  SYSCALL(_FlashToRAM)
#elif TI84PCE
  ldir
#endif
  or a,a
  ret

;=== INTERNAL ===;

file_error.nomem:
  ld a,ZERR_NOMEM
  scf
  ret


;; file_to_RAM -- bring file into RAM
;; INPUTS:
;;  ix = file pointer
;; OUTPUTS:
;;  de = pointer to file data
;; DESTROYS: 
;; ERRORS: yes.
file_to_RAM:
  call file_info
  ret c           ; error
  inc de \ inc de ; skip size bytes
  ret z           ; already in RAM
  SYSCALL(_Arc_Unarc)
  or a,a 
  ret


;; file_info -- get file info
;; INPUTS:
;;  ix = file pointer
;; OUTPUTS:
;;  [b:de] = address
;;  ZF = whether in RAM (Z = RAM, NZ = archive)
;; DESTROYS: ???
;; ERRORS: yes.
file_info:
  LEA_HL_IX(FILE.NAME)
  call appvar_to_OP1
  SYSCALL(_ChkFindSym)
  ld a,ZERR_NOVAR
  ret c
#if TI83PLUS
  ld a,b
  or a,a
#elif TI84PCE
  call _ChkInRAM
  scf \ ccf ; NC
#endif
  ret

#if TI83PLUS
#include "ti83plus/zfile.z80"
#elif TI84PCE
#include "ti84pce/zfile.z80"
#endif


#include "zapp.z80"

#endif