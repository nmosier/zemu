;; zin.z80 -- input routines

#include "zin.inc"

;; zin_read -- perform read operation (see online reference)
;; INPUTS:
;;  hl = text-buf address (ZA)
;;  de = parse-buf address (ZA)
;; OUTPUTS: (none)
;; ERRORS: yes
;; DESTROYS: (all)
zin_read:
   push iy
   ld iy,0
   add iy,sp
   push hl ; text-buf  (ZA)
   push de ; parse-buf (ZA)
   ;; allocate PA text-buf
   call zaddr_fetch ; %a <- text-maxlen
   jr c,zin_read.leave
   inc a            ; BUG
   ex de,hl
   ld hl,-1
   neg
   ld l,a
   neg
   add hl,sp
   ld sp,hl  ; hl = text-buf (PA)
zin_read.text:
   call zin_getsn
zin_read.parse:
   ld de,(iy-6) ; parse-buf
   call nc,zin_parse
zin_read.leave:
   ld sp,iy
   pop iy
   ret

;; zin_getsn -- get input string, stripping trailing newline & converting to lowercase
;; INPUTS:
;;  hl = buffer pointer (PA)
;;  de = buffer pointer (ZA)
;;  a = buffer size
;; OUTPUTS:
;;  hl = buffer pointer (PA)
;;  de = buffer pointer (ZA)
;;  a = string length (not including NUL-terminator)
;; DESTROYS: (all)
;; ERRORS: yes.
zin_getsn:
   push iy
   ld iy,0
   add iy,sp
   push hl ; bufptr (PA)
   push de ; bufptr (ZA)
   ld ix,win_main
   ld bc,0
   ld c,a
   push iy
   call zwin_nopage  ; don't want to page when getting input
   call zwin_getsn
   pop iy
   jr c,zin_getsn.leave
   call tolowers
   ld a,c
   or a,a
   jr z,zin_getsn.copy
   add hl,bc
   dec hl
   ld a,ASCII_NEWLINE
   cp a,(hl)
   jr nz,zin_getsn.copy
   ;; overwrite newline
   ld (hl),0
   dec bc
zin_getsn.copy:
   ld b,c
   inc b        ; include NUL-terminator
   ld hl,(iy-3) ; bufptr (PA)
   ld de,(iy-6) ; bufptr (ZA)
   push bc
   call pmemcpyz_b      
   pop bc
   jr c,zin_getsn.leave ; ERROR
   ld a,c       ; restore string length
   or a,a       ; SUCCESS
zin_getsn.leave:
   pop de
   pop hl
   pop iy
   ret



;; zin_parse -- parse input (as required by `read')
;; INPUTS:
;;  hl = pointer to text buffer (PA)
;;  de = pointer to parse buffer (ZA)
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
zin_parse:
   ;; copy word-sep string onto stack
   push iy
   ld iy,0
   add iy,sp
   push hl ; text-buf
   push de ; parse-buf
   push af ; local 0,1,2
   call zdict_hdraddr
   jr c,zin_parse.done ; ERROR
   call zaddr_fetch ; byte: size of word-sep buffer
   jr c,zin_parse.done ; ERROR
   ;; allocate word-sep buffer
   ex de,hl
   ld b,a ; for call to memcpy
   inc a ; NUL terminator
   inc a ; ZSCII SPACE
   ld hl,-1
   neg
   ld l,a
   add hl,sp
   ld sp,hl ; buffer starts at (sp)
   ex de,hl
   ;; initialize word-sep buffer
   ;; hl = word-sep string pointer (ZA, src)
   ;; de = word-sep string pointer (PA, dst)
   call zmemcpyp_b ; copy word-sep string into memory
   jr c,zin_parse.done  ; ERROR
   ld (iy-10),ZSCII_NUL ; NUL terminate string
   ld (iy-11),' '       ; ZSCII SPACE
   ;; fetch max word count of parse-buf (ZA)
   ld hl,(iy-6)
   call zaddr_fetch ; word-maxcnt is first byte
   jr c,zin_parse.done  ; ERROR
   ld (iy-8),a          ; store word-maxcnt
   ;; put arguments in place for zin_parse_word
   ex de,hl
   inc de       ; de <- parse-buf (pointer to 1st entry), skip over word-cnt
   ld hl,0
   add hl,sp    ; recompute word-sep PA dst => hl
   ld bc,(iy-3) ; fetch text-buf pointer (PA)
   ld (iy-7),0  ; word-cnt <- 0 (local 0)
   jr zin_parse.word_entry
zin_parse.word_loop:
   inc (iy-7)   ; ++ word-cnt
zin_parse.word_entry:
   ;; compare word-cnt with word-maxcnt
   ld a,(iy-7)  ; %a <- word-cnt
   cp a,(iy-8)  ; flags(word-cnt - word-maxcnt)
   jr nc,zin_parse.write_wordcnt
   ld hl,(iy-3) ; text-buf start
   or a,a
   sbc hl,bc    ; hl <- word-index * -1
   ld a,l
   neg          ; a = word-index
   ld hl,0
   add hl,sp    ; restore word-sep pointer
   call zin_parse_word
   jr nc,zin_parse.word_loop
   ;; check for error
   or a,a
   scf
   jr nz,zin_parse.done ; ERROR
zin_parse.write_wordcnt:
   ;; write word-cnt into parse buffer
   ld a,(iy-7)  ; %a <- word-cnt
   ld hl,(iy-6)
   inc hl       ; hl <- parse-buf (pointer to word-cnt)
   call zaddr_store
   or a,a       ; SUCCESS
zin_parse.done:
   ld sp,iy
   pop iy
   ret

;; zin_parse_word -- parse single word in input string
;; INPUTS:
;;  bc = pointer to next char in text buffer (PA)
;;  de = pointer to next entry in parse buffer (ZA)
;;  hl = pointer to word-sep string (PA)
;;  a = index of word in text-buf
;; OUTPUTS:
;;  bc points to beginning of next word (or NUL if none)
;;  de points to next entry in parse buffer
;;  hl unmodified
;;  NC => word successfully parsed
;;  C  =>
;;     a == 0 => reached end of word
;;     a != 0 => error occurred
;; DESTROYS: ???
;; ERRORS: yes.
;; NOTE: assumes there is space in the parse buffer.
;; BUGS: word-len and word-index are incorrect.
zin_parse_word:
   push iy
   ld iy,-9
   add iy,sp
   push hl ; word-sep (PA)
   push de ; parse-buf (ZA)
   push bc ; text-buf (PA)
   push af ; local 0,1,2
   ;; initialize counters
   ld d,0 ; word-len
   add a,ZIN_TXTBUF_HDRSIZE
   ld e,a ; word-index
   jr zin_parse_word.spaces_entry
   ; skip over leading spaces
zin_parse_word.spaces_loop:
   inc bc
   inc e ; word-index++
zin_parse_word.spaces_entry:
   ld a,(bc)
   cp a,' ' ; ZSCII SPACE
   jr z,zin_parse_word.spaces_loop
   ; end spaces loop
   ; save word-index
   ld (iy-2),e ; local 1 -- save word-index
   ;; save text-buf pointer
   ld (iy+0),bc
   jr zin_parse_word.term_entry
   ; find word terminator
zin_parse_word.term_loop:
   inc bc
   inc d ; word-len++
zin_parse_word.term_entry:
   ld hl,(iy+6) ; saved word-sep string
   ld a,(bc)
   call strchr
   cp a,(hl) ; NOTE: this does what we want if a == '\0' already.
   jr nz,zin_parse_word.term_loop
   ; end term loop
   inc d \ dec d ; cp d,0 (check if word-len 0)
   jr nz,_
   or a,a
   jr z,zin_parse_word.none ; end of text-buf
   ; otherwise, is word-sep & treat as word on its own
   inc bc
   inc d
_  ld (iy-3),d    ; save word-len, local 2
   ; INVARIANT: bc points to (one past) end of word.
   ; now need to encode this ZSCII code array into a Z-string.
zin_parse_word.encode:
   ; allocate space on stack
   ld hl,-ZDICT_WORDLEN
   add hl,sp
   ld sp,hl
   ex de,hl
   ; temporarily replace word-sep with NUL-terinator
   ld a,(bc)
   ld (iy-1),a  ; local 0 -- displaced delimiter
   ld hl,(iy+0) ; text-buf pointer
   ld (iy+0),bc ; update text-buf pointer
   xor a,a
   ld (bc),a    ; temporarily NUL-terminate word
   ; all args (hl, de, c) set
   ld c,ZDICT_WORDLEN/2 ; in words, not bytes
   call zstr_encode_pad
   ld a,(iy-1)
   ld bc,(iy+0)   ; restore text-pointer
   ld (bc),a    ; restore word terminator
   jr c,zin_parse_word.leave ; ERROR
   ; search for word in dictionary
zin_parse_word.search:
   ld hl,0
   add hl,sp
   call zdict_search
   jr c,zin_parse_word.leave ; ERROR
   ;; write entry into parse table
zin_parse_word.write:
   ;; write dictionary entry byte address
   ex de,hl
   ld hl,(iy+3) ; parse-buf
   call zaddr_storew
   jr c,zin_parse_word.leave ;; ERROR
   ld a,(iy-3)  ; local 2 -- word-len
   call zaddr_store
   ld a,(iy-2)  ; local 1 -- word-index
   call zaddr_store
   ld (iy+3),hl ; new parse-buf address
   or a,a ; SUCCESS
   jr zin_parse_word.leave

;; no words left to parse
zin_parse_word.none:
   xor a,a
   scf
   jr zin_parse_word.leave

zin_parse_word.leave:
   ld sp,iy
   pop bc
   pop de
   pop hl
   pop iy
   ret


