;; zmap.z80 -- zmap routines
;; Nicholas Mosier 2019
#ifndef ZMAP_Z80
#define ZMAP_Z80

#include "zaddr.inc"
#include "zemu.inc"


;; zmap_fetchpage -- fetch pointer to zpage.
;; INPUTS:
;;  a = page number
;;  b = access mode (ZADDR_READ, ZADDR_WRITE)
;; OUTPUT:
;;  ix = file pointer
;; DESTROYS: (all)
;; ERRORS: yes.
;; NOTE: performs no validation of page number.
;; TODO: this should check if INRAM flag of page for writes.
zmap_fetchpage:
  call zaddr_pageent
  ret c
  bit ZADDR_WRITE,b
  ret z
  bit ZMAP_ENT.FLAGS.COPY,(ix+ZMAP_ENT.FLAGS)
  ret z
  ld hl,zemu_pagepfx
  push af
   call zmap_copypage
  pop bc
  ld a,b
  call nc,zaddr_pageent
  ret c
  ld (ix+ZMAP_ENT.FLAGS),MASK(ZMAP_ENT.FLAGS.SAVE)
  LEA_IX_IX(ZMAP_ENT.FILE)
  jp file_to_RAM



;; zmap_copypage -- copy page (used when write to page is read-only)
;; INPUTS:
;;  a = page number
;;  hl = name prefix
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
;; NOTE: Doesn't touch zmap entry flags. Caller must set them properly.
;; *** portable ***
zmap_copypage:
  ;; get src and dst var names
  ;; name page
  ld (zmap_copypage.pageno),a
  ld de,zmap_copypage.file + FILE.NAME
  call zmap_namepage
  push ix
   push iy
zmap_copypage.loop:
    ld hl,zmap_copypage.getfile ; getter for source
    ld iy,zmap_copypage.file
    call file_copy
    jr nc,zmap_copypage.continue
    call zmap_archivepage
    jr nc,zmap_copypage.loop
zmap_copypage.continue:
   pop iy
   call nc,zmap_copypage.getfile
   ld hl,zmap_copypage.file
   LEA_DE_IX(ZMAP_ENT.FILE) ; flags preserved
   ld bc,SIZEOF_FILE
  pop ix
  ret c
  ldir
  ret


zmap_copypage.getfile:
  ld a,(zmap_copypage.pageno)
  push de
   call zaddr_pageent
  pop de
  ret c
  LEA_IX_IX(ZMAP_ENT.FILE)
  ret

zmap_copypage.pageno: .db 0

zmap_copypage.file: RES_FILE

zemu_pagepfx: .db "ZEMUP",0


;; zmap_archivepage -- archive page to free RAM
;; INPUTS: (none)
;; OUTPUTS: (none)
;; ERRORS: ???
;; DESTROYS: ???
zmap_archivepage:
  ;; find first unarchived page
  push ix
   call zmap_table
zmap_archivepage.loop:
   LEA_IX_IX(ZMAP_ENT.FILE)
   call file_info ; ZF = whether in RAM
   jr c,zmap_archivepage.done
   jr z,zmap_archivepage.found
   LEA_IX_IX(SIZEOF_ZMAP_ENT - ZMAP_ENT.FILE)
   djnz zmap_open.loop
   ld a,ZERR_NOMEM
   scf
   jr zmap_archivepage.done
zmap_archivepage.found:
   call file_to_archive
zmap_archivepage.done:
  pop ix
  ret


;; zmap_namepage -- rename page after being copied
;; INPUTS:
;;  hl = prefix
;;  a = page ID
;;  de = buffer (at least 8 chars)
;; OUTPUTS:
;;  hl = buffer
;; DESTROYS: a, bc, de
;; ERRORS: no.
;; *** portable ***
;; NOTE: Assumes prefix <= 6 chars.
zmap_namepage:
  push de     ; buffer
   push af     ; ID
    ld bc,VARNAMELEN
    call strncpy
   pop af      ; ID
   ld hl,xtos.buf
   call xtos
   dec hl
   dec hl
   call strncpy
  pop hl
  ret

;; zmap_load -- load saved zmap into working zmap
;; INPUTS:
;;  hl = name of saved zmap (zmap_load)
;; OUTPUTS:
;;  touches & resizes working zmap and copies contents of saved zmap into it
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zmap_load:
  ld de,zmap_canonical_file+FILE.NAME
  ld bc,VARNAMELEN
  call strncpy
  push ix
   call zmap_get_canonical_file
   push iy
    ld iy,zmap_working_file
    call file_open
    ld hl,zmap_get_canonical_file
    call nc,file_copy
   pop iy
  pop ix
  jp nc,zmap_open
  ret



;; zmap_open -- open zmap
;; INPUTS: (none)
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
zmap_open:
  push ix
   call zmap_table
   jr c,zmap_open.done
zmap_open.loop:
   LEA_IX_IX(ZMAP_ENT.FILE)
   push bc
    call file_open
   pop bc
   jr c,zmap_open.done
   LEA_IX_IX(SIZEOF_ZMAP_ENT - ZMAP_ENT.FILE)
   djnz zmap_open.loop
   or a,a
zmap_open.done:
  pop ix
  ret


;; zmap_close -- close zmap
;; INPUTS: (none)
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
;; OPTIM: write function that takes function and iterates over all entries.
zmap_close:
  push ix 
   call zmap_table
   jr c,zmap_close.done
zmap_close.loop:
   LEA_IX_IX(ZMAP_ENT.FILE)
   push bc
    call file_close
   pop bc
   jr c,zmap_close.done
   LEA_IX_IX(SIZEOF_ZMAP_ENT - ZMAP_ENT.FILE)
   djnz zmap_close.loop
   or a,a
zmap_close.done:
  pop ix
  ret


;; zmap_header -- get pointer to zmap header
;; INPUTS: (none)
;; OUTPUTS:
;;  ix = pointer to zmap header
;; DESTROYS: (none)
;; ERRORS: yes.
;; OPTIM required
zmap_header:
  push hl
   push de
    push bc
     push af
      call zmap_get_working_file
      call file_baseaddr
      LD_IX_HL
      call pop_all
  ret


;; zmap_table -- get pointer to zmap table
;; INPUTS: (none)
;; OUTPUTS:
;;  ix = pointer to zmap table
;;  b = npages
;; DESTROYS: (none)
;; ERRORS: yes.
;; OPTIM required.
;; NOTE: Assumes zmap is in RAM.
zmap_table:
  push hl
   push de
    push bc
     push af
      call zmap_get_working_file
      ld hl,ZMAP_HDRSIZE
      call nc,file_addr
      LD_IX_HL
      call pop_all
  ret c
  ld b,(ix+(ZMAP_HDR_NPAGES-ZMAP_HDRSIZE))
  ret


;; zmap_get_{working,canonical}_file -- return pointer to working zmap file
;; INPUTS: (none)
;; OUTPUTS:
;;  ix <- zmap_working_file
;; DESTROYS: (none)
;; ERRORS: no, but NC.
zmap_get_working_file:
  ld ix,zmap_working_file
  or a,a
  ret

zmap_get_canonical_file:
  ld ix,zmap_canonical_file
  or a,a
  ret


;;;;;;;;;;;;;;;;;;;;;;;;
;;;;; ZMAP GLOBALS ;;;;;
;;;;;;;;;;;;;;;;;;;;;;;

zmap_working_file: D_FILE("ZEMUMAP", 0)
zmap_canonical_file: RES_FILE
zmap_name_current:   .db "ZEMUMAP",0

#endif