;; zmem.z80 -- memory management for zemu & save states
;; TODO -- stack overflow?

#ifndef ZMEM_Z80
#define ZMEM_Z80

#include "zfile.inc"
#include "zaddr.inc"
#include "zmem.inc"

ZMEM_SIZE .equ $400 ; 1K -- absolute minimum is 1K by Z-machine standard

;; GLOBAL VARIABLES ;;

;; NOTE: stack grows up.

zframe_begin:
zframe_fp: DL 0   ; p-addr
zframe_sp: DL 0   ; p-addr
zframe_pc: DZA(0) ; z-addr
zframe_nl: .db 0
zframe_rv: .db 0
zframe_end:

f_stack: D_FILE("ZEMUMEM", ZMEM_SIZE)

;; zstack_begin -- get begin
;; INPUTS: (none)
;; OUTPUTS:
;;  hl = pointer to beginning of stack file in RAM
;; DESTROYS: (none)
;; ERRORS: yes.
;; OPTIM: All calls to this could be heavily optimized, since preserving all registers is often
;;        not required.
zstack_begin:
  push ix
   push bc
    push de
     push af
      ld ix,f_stack
      call file_baseaddr
     pop de
     ld a,d
    pop de
   pop bc
  pop ix
  ret

#if ZDBG
;; zstack_addr -- get address of stack given offset
;; INPUTS:
;;  hl = offset
;; OUTPUTS:
;;  hl = pointer (RAM)
;; DESTROYS: (all)
;; ERRORS: yes.
zstack_addr:
  push ix
   ld ix,f_stack
   call file_addr
  pop ix
  ret
#endif


;; zframe_pc_set -- set Z-addr at (zframe_pc)
;; INPUTS:
;;  [b:hl] = Z-addr
;; OUTPUTS:
;;  (zframe_pc) <- [b:hl]
;; ERRORS: no.
;; DESTROYS: (none)
zframe_pc_set:
  LD_BHL_TO_ABS_ZA(zframe_pc)
  ret


;; zmem_init -- initialize memory for zemu. Empty call state and program stack.
;; INPUTS: (none)
;; OUTPUTS:
;;  Sets zmem_appvar, zmem_callstate_top, zmem_stack_top.
;; ERROR: a = error code, CF set
;; DESTROYS: (all), OP1
;; TODO: check size bytes of appvar.
;; *** portable ***
zmem_init:
  push ix
   ld ix,f_stack
   call file_create
  pop ix
  ret c
  ;; reset offsets
  LD_HL_0
  ld (zframe_fp),hl
  ld (zframe_sp),hl
  xor a,a
  ld (zframe_nl),a
  LD_BHL_IMM(ZADDR_NULL)
  jp zframe_pc_set
   

;; zstack_enter -- enter new stack frame
;; INPUTS:
;;  a = number of local variables
;; OUTPUTS: (none)
;; DESTROYS: hl,de
;; ERRORS: (none)
;; *** portable ***
zstack_enter:
  push bc ; save variable number
   ; push new stack frame onto stack
   call zstack_begin
   jr c,zstack_enter.done
   push hl
    ld de,(zframe_sp)
    add hl,de
    ex de,hl
    ld hl,zframe_begin
    ld bc,ZFRAME_SIZE
    ldir
   pop bc
   ex de,hl
   or a,a
   sbc hl,bc
   ld (zframe_fp),hl
   MLT_A(ZWORD_SIZE, R_DE)
   add hl,de
   ld (zframe_sp),hl
   ; update number of locals (NL)
   ld (zframe_nl),a
   ; update return variable
zstack_enter.done:
  pop bc ; restore variable number
  ret


;; zstack_leave -- leave current stack frame
;; INPUTS: (none)
;; OUTPUTS: (none)
;; DESTROYS: bc, de
;; ERRORS: yes.
;; *** portable ***
zstack_leave:
  push hl
   call zstack_begin
   ld de,(zframe_fp)
   add hl,de
   dec hl ; for lddr
   ld de,zframe_begin + ZFRAME_SIZE - 1
   ld bc,ZFRAME_SIZE
   lddr
  pop hl
  ret


#if TI83PLUS
#include "ti83plus/zmem.z80"
#elif TI84PCE
#include "ti84pce/zmem.z80"
#endif



#endif