#ifndef ZOBJ_Z80
#define ZOBJ_Z80

#include "zobj.inc"
#include "zutil.inc"
#include "zaddr.inc"

;; zobj_tabaddr -- return logical address of object table
;; INPUTS: (none)
;; OUTPUTS:
;;  [b:hl] = logical address of object table
;; ERRORS: yes.
;; DESTROYS: (none)
zobj_tabaddr:
  push de ; save de
  ld d,a ; save %a
  push de
  LD_BHL_IMM(ZHDR_OBJTAB)
  call zaddr_fetchwu
  ex de,hl
#if TI83PLUS
  ld b,0
#endif
zobj_tabaddr.done:
  pop de
  ld a,d ; restore %a
  pop de ; restore de
  ret


   
;; zobj_objaddr -- return logical address of object
;; INPUTS:
;;  a = object number
;; OUTPUTS:
;;  [b:hl] = logical address of object
;; ERRORS: yes.
;; DESTROYS: de
;; *** portable ***
zobj_objaddr:
  or a,a
  jr z,zobj_objaddr.err
  dec a
  MLT_A(ZOBJSIZE, R_DE)
  inc a ; restore object no.
  ld hl,ZOBJTAB_PROPDEFAULTS_SIZE
  add hl,de
  push hl ; save obj offset
   call zobj_tabaddr
  pop de ; restore obj offset
  ret c
  ;; get obj Z-addr
  ADD_BHL_DE_ZA
  ret

zobj_objaddr.err:
   ld a,ZERR_BADOBJ
   scf
   ret

;; zobj_attr -- find attribute of object
;; INPUTS:
;;  a = object number
;;  c = attribute number
;; OUTPUTS:
;;  [b:hl] = logical address of byte containing attribute
;;  a = mask for extracting bit
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zobj_attr:
  ld b,a ; save obj no
  ;; check params
  ;; verify attr no < 32
  ld a,c
  cp a,32
  ccf
  ld a,ZERR_BADATTR
  ret c
  ;; get object address
  ld a,b ; restore obj no
  call zobj_objaddr
  ret c
  ;; find bit offset within byte
  ;; boff <- 8 - (attrno % 8) == (8 - attrno) % 8
  ld a,$07
  xor a,c ; flip last 3 bits
  and a,$07 ; only want last 3 bits
  call maskb
  ; get logical address of byte containing attribute
  srl c
  srl c
  srl c
  ld de,ZOBJ_O_ATTRS
  ADD_BHL_DE_ZA ; get attrs start
  UCAST_C_TO_DE ; get attrs index
  ADD_BHL_DE_ZA ; get attr within byte
  ; or a,a
  ret

;; zobj_attrtest -- test attribute of object
;; INPUTS:
;;  a = object number
;;  c = attribute number
;; OUTPUTS:
;;  zero flag reset (Z) if attribute is set, set (NZ) otherwise
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zobj_attrtest:
   call zobj_attr
   ret c
   ld d,a
   call zaddr_fetch
   ret c
   and a,d
   ret

;; zobj_attrclear -- clear attribute of object
;; INPUTS:
;;  a = object number
;;  c = attribute number
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zobj_attrclear:
   call zobj_attr
   ret c
   cpl
   push af
   call zaddr_fetch
   pop de
   ret c
   and a,d
   DEC_BHL_ZA
   jp zaddr_store

;; zobj_attrset -- set attribute of object
;; INPUTS:
;;  a = object number
;;  c = attribute number
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zobj_attrset:
   call zobj_attr
   ret c
   push af
   call zaddr_fetch
   pop de
   ret c
   or a,d
   DEC_BHL_ZA
   jp zaddr_store


;; zobj_insert -- transfer childhood of object to another parent
;; INPUTS:
;;  a = object number
;;  c = new parent object number
;; OUTPUTS:
;;  modifies object table
;; ERRORS: yes.
;; DESTROYS: (all)
;; TODO: use stack, not global data.
;; *** portable ***
zobj_insert:
   ; 0. Save params
   ld hl,zobj_insert.data
   ld (hl),a
   inc hl
   ld (hl),c
   ; 1. Remove object from parent
   call zobj_remove
   ret c
   ; 2.   Insert object as first child of new parent
   ; 2.a  Get parent's address
   ld a,(zobj_insert.parent)
   call zobj_objaddr
   ret c
   ; 2.b  Fetch parent's current child
   ld de,ZOBJ_O_CHILD
   ADD_BHL_DE_ZA
   call zaddr_fetch
   ret c
   ld (zobj_insert.newsib),a
   ; 2.c  Update parent's child
   DEC_BHL_ZA
   ld a,(zobj_insert.obj)
   call zaddr_store
   ret c
   ; 2.d  Update child's parent and sibling
   ld a,(zobj_insert.obj)
   call zobj_objaddr
   ret c
   ld de,ZOBJ_O_FAMILY
   ADD_BHL_DE_ZA
   ld a,(zobj_insert.parent)
   call zaddr_store
   ret c
   ld a,(zobj_insert.newsib)
   jp zaddr_store

zobj_insert.data:
zobj_insert.obj:        .db 0
zobj_insert.parent:     .db 0
zobj_insert.newsib:     .db 0


;; zobj_remove -- remove object from parent
;; INPUTS:
;;  a = object number
;; OUTPUTS:
;;  object table modified
;; ERRORS: yes.
;; DESTROYS: (all)
zobj_remove:
  ;; get object address
  call zobj_objaddr
  ret c
  ld (zobj_remove.obj),a ; save obj no
  ;; get parent and sibling
  ld de,ZOBJ_O_FAMILY
  ADD_BHL_DE_ZA
  call zaddr_fetch ; fetch parent no
  ret c
  or a,a
  ret z                  ; object has no parent
  ld (zobj_remove.parent),a ; save parent no
  call zaddr_fetch ; fetch sibling no
  ret c
  ld (zobj_remove.nextsib),a ; save next sibling no
  ;; find first child of parent
  ld a,(zobj_remove.parent)
  call zobj_objaddr ; addr of parent
  ret c
  ld de,ZOBJ_O_CHILD
  ADD_BHL_DE_ZA
  call zaddr_fetch ; a <- current first child
  ret c
  DEC_BHL_ZA ; z-addr to current first child no
  ;; check cases for current first child;
  ;; case (i)  -- first child is object being removed
  ;; case (ii) -- otherwise
  ld c,a
  ld a,(zobj_remove.obj)
  cp a,c
  jr nz,zobj_remove.caseii
zobj_remove.casei:
  ;; case (i)
  ld a,(zobj_remove.nextsib)
  call zaddr_store
  ret c
  jr zobj_remove.update_obj
zobj_remove.caseii:
  ;; case (ii)
  ld a,c ; a <- current first child
  call zobj_objaddr  
  ret c
  ld a,(zobj_remove.obj) ; use for comparison
  ld c,a
zobj_remove.loop:
  ld de,ZOBJ_O_SIBLING
  ADD_BHL_DE_ZA
  call zaddr_fetch
  ret c
  cp a,c
  jr z,zobj_remove.found
  call zobj_objaddr ; handles case when a == 0
  jr nc,zobj_remove.loop
  ret ; error

zobj_remove.found:
  DEC_BHL_ZA
  ld a,(zobj_remove.nextsib)
  call zaddr_store
  ret c
zobj_remove.update_obj:
  ld a,(zobj_remove.obj)
  call zobj_objaddr
  ret c
  ld de,ZOBJ_O_FAMILY
  ADD_BHL_DE_ZA
  xor a,a
  call zaddr_store ; no parent
  ret c
  xor a,a
  call zaddr_store ; no siblings
  ret c
zobj_remove.done:
  or a,a
  ret

zobj_remove.data:
zobj_remove.obj:     .db 0
zobj_remove.parent:  .db 0
zobj_remove.nextsib: .db 0


;--------------------------------;
;        PROPERTY FUNCTIONS      ;
;--------------------------------;

;; zobj_proptab -- get logical address of property table [header]
;; INPUTS:
;;  a = object number
;; OUTPUTS:
;;  [b:hl] = logical address of object's property table
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zobj_proptab:
zobj_proptab_hdr:
   call zobj_objaddr
   ret c
   ld de,ZOBJ_O_PROPS
   ADD_BHL_DE_ZA
   call zaddr_fetchz
   ex de,hl
#if TI83PLUS
   ld b,c
#endif
   ret

;; zobj_proptab_body -- get logical address of object's property table body
;; zobj_proptab_body_alt -- alternate entry point if property table already computed in [b:hl]
;; INPUTS:
;;  a = object number
;; OUTPUTS:
;;  [b:hl] = logical address of object's property table body
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zobj_proptab_body:
   call zobj_proptab
   ret c
zobj_proptab_body_alt:
   call zaddr_fetch ; get text-length, in words
   ret c
   UCAST_A_TO_DE
   ADD_BHL_DE_ZA
   ADD_BHL_DE_ZA
zobj_proptab_body.done:
   or a,a
   ret

;; zobj_propaddr -- get logical address of object property data
;; INPUTS:
;;  a = object number
;;  c = property number
;; OUTPUTS:
;;  [b:hl] = logical address of object property data
;;  a = property data size
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zobj_propaddr:
   push bc
    call zobj_proptab_body
   pop de
   ret c
   ; loop invariants:
   ;  - e holds target property number
   ;  - hl holds address of next unexamined entry
   ;  - hl may or may not point to 0
   jr zobj_propaddr.entry
zobj_propaddr.loop:
   push de
   call zobj_propid_to_size
   UCAST_A_TO_DE
   ADD_BHL_DE_ZA
   pop de
zobj_propaddr.entry:
   call zaddr_fetch
   ret c
   or a,a
   jr z,zobj_propaddr.notfound
   ld c,a ; save propid
   call zobj_propid_to_num
   cp a,e ; are the property numbers equal?
   ld a,c ; restore propid
   jr z,zobj_propaddr.found
   jr nc,zobj_propaddr.loop
zobj_propaddr.notfound:
   ; not found
   LD_HL_0
zobj_propaddr.found:
   ; found
   jp zobj_propid_to_size


;; zobj_propid_to_size -- extract raw byte size from property ID byte
;; INPUTS:
;;  a = property ID byte
;; OUTPUTS:
;;  a = byte size
;; DESTROYS: a
;; ERRORS: no, but NC
;; *** portable ***
zobj_propid_to_size:
   and a,$E0 ; 0b1110.0000
   rlca
   rlca
   rlca
   inc a
   or a,a
   ret

;; zobj_propid_to_num -- extract property number from property ID byte
;; INPUTS:
;;  a = property ID byte
;; OUTPUTS:
;;  a = property number
;; DESTROYS: a
;; ERRORS: no.
;; *** portable ***
zobj_propid_to_num:
   and a,$1F
   ; dec a ;; TODO -- check whether this is correct
         ;; would make sense b/c otherwise 0 would describe valid
         ;; property of ID 0, length 8
   ret

;; zobj_propsize -- get size of object property data
;; INPUTS:
;;  a = object number
;;  c = property number
;; OUTPUTS:
;;  a = size of object property data
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zobj_propsize:
   call zobj_propaddr
   ret c
   ld de,1
   sbc hl,de ; dec hl with zero flag set
   ld a,ZERR_NOPROP
   ret c ; then hl = 0, so property wasn't found
zobj_propsize.done:
   or a,a
   ret

;; zobj_propval -- retrieve object's property value
;; INPUTS:
;;  a = object number
;;  c = property number
;; OUTPUTS:
;;  de = property data, sign-extended
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zobj_propval:
   ld e,c
   push de ; preserve property #
   call zobj_propaddr
   pop de  ; restore property #
   ret c
   call cp_hl_0
   jp z,zobj_propval.default
   or a,a ; check if invalid size
   jr z,zobj_propval.error
   dec a
   jp z,zaddr_fetchb
   dec a
   jp z,zaddr_fetchw
zobj_propval.error:
   ld a,ZERR_BADPROP
   scf
   ret

zobj_propval.default:
   ld a,e ; set property number parameter
   jp zobj_propdefault

;; zobj_nextprop -- fetch next prop number
;; INPUTS:
;;  a = object number
;;  c = prop number (or 0 for 1st prop no)
;; OUTPUTS:
;;  a = next prop number (0 if none)
;; DESTROYS: 
;; ERRORS: yes.
;; *** portable ***
zobj_nextprop:
   ld b,a
   ld a,c
   or a,a
   ld a,b
   jr nz,zobj_nextprop.next
zobj_nextprop.first:
   call zobj_proptab_body
   ret c
   jr zobj_nextprop.fetch
zobj_nextprop.next:
   call zobj_propaddr
   ret c
   ; %a contains current prop size
   UCAST_A_TO_DE
   ADD_BHL_DE_ZA
zobj_nextprop.fetch:
   call zaddr_fetch
   ret c
   call zobj_propid_to_num
   or a,a
   ret


;; zobj_propdefault -- lookup property default value
;; INPUTS:
;;  a = property number
;; OUTPUTS:
;;  de = (sign-extended) value, long
;; DESTROYS: (all)
;; ERRORS: yes.
;; TODO: check if property is valid.
;; *** portable ***
zobj_propdefault:
  UCAST_A_TO_DE
  push de
  call zobj_tabaddr
  pop de
  ret c
  dec e
  ADD_BHL_DE_ZA
  ADD_BHL_DE_ZA ; [b:hl] <- ix + de*WORD_SIZE
  jp zaddr_fetchw
   

;------------------------------;
;        FAMILY FUNCTIONS      ;
;------------------------------;

;; zobj_parent -- get object's parent
;; INPUTS:
;;  a = object number
;; OUTPUTS:
;;  a = object's parent (0 if no parent)
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zobj_parent:
   call zobj_objaddr
   ret c
   ld de,ZOBJ_O_PARENT
   ADD_BHL_DE_ZA
   jp zaddr_fetch

;; zobj_sibling -- get object's sibling
;; INPUTS:
;;  a = object number
;; OUTPUTS:
;;  a = object's first sibling (0 if no sibling)
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zobj_sibling:
   call zobj_objaddr
   ret c
   ld de,ZOBJ_O_SIBLING
   ADD_BHL_DE_ZA
   jp zaddr_fetch


;; zobj_child -- get object's first child
;; INPUTS:
;;  a = object number
;; OUTPUTS:
;;  a = object's first child
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zobj_child:
   call zobj_objaddr
   ret c
   ld de,ZOBJ_O_CHILD
   ADD_BHL_DE_ZA
   jp zaddr_fetch

;---------------;
;    OTHER      ;
;---------------;

;; zobj_downcast -- downcast from word size to object id
;; INPUTS:
;;  hl = value
;; OUTPUTS:
;;  a = object ID
;; ERRORS: yes.
;; DESTROYS: (none)
;; *** portable ***
zobj_downcast:
   push de
   ld de,$100
   call cp_hl_de
   pop de
   ccf
   ld a,l
   ret nc
   ld a,ZERR_BADOBJ
   ret

;---------------------------;
;    DEBUGGING FUNCTIONS    ;
;---------------------------;



;; zobj_validate -- validate tree rooted at object
;; zobj_validate:


#endif