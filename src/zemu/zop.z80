; zop.z80 -- utilities for reading/writing operands

#ifndef ZOP_Z80
#define ZOP_Z80

#include "zti.inc"
#include "util.inc"
#include "zaddr.inc"

;; zcode_readop -- fetch the value of the next operand.
;; INPUTS:
;;  zcode_decode.types, zframe_pc set
;; OUTPUTS:
;;  hl = 16-bit value of operand, zero-padded if 8-bits
;;  zcode_decode.types, zframe_pc updated
;;  Z if no more ops, NZ if op is returned
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zcode_readop:
   ; read type
   ld hl,zcode_decode.types
   xor a,a
   scf
   rl (hl) ; (hl) = ((hl) << 1) | 0x1
   rla
   scf
   rl (hl) ; (hl) = ((hl) << 1) | 0x1
   rla
   ; %a[0:1] contains type
   ; (hl) = (hl) << 2 | OMITTED
   cp a,ZOP_OMITTED
   ret z
   LD_BHL_FROM_ABS_ZA(zframe_pc)
   call zcode_fetch_op
   ret c
   LD_BHL_TO_ABS_ZA(zframe_pc) ; update pointer
   ex de,hl
   or a,$ff ; NZ, NC
   ret

;; zcode_readop_force -- fetch value of the next operand.
;;                       report an error if there is no operand.
;; INPUTS:
;;  zcode_decode.types, zframe_pc set
;; OUTPUTS:
;;  hl = 24-bit value of operand, zero-padded if 8-bits
;;  zcode_decode.types, zframe_pc updated
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zcode_readop_force:
   call zcode_readop
   ret nz
   scf ; error if no more ops
   ret

;; zop_readn -- read _n_ ops
;; INPUTS:
;;  a = number of ops
;;  zframe_pc, op vars set
;; OUTPUTS:
;;  hl -- n >= 1
;;  de -- n >= 2
;;  bc -- n >= 3
;;  ix -- n >= 4
;;  updates zframe_pc
;; NOTE: supports up to 4 ops (0 <= %a <= 4).
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zop_readn:
  or a,a
  ret z
  ld b,a
  ld c,a
  ld ix,zop_readn.data
zop_readn.loop:
  push ix
   push bc
    call zcode_readop_force
   pop bc
  pop ix
  ret c
  LD_HL_TO_IX(0)
  LEA_IX_IX_REG(LONG_SIZE, R_DE)
  djnz zop_readn.loop
zop_readn.load:
  ld a,c
  ld hl,(zop_readn.data+(0*LONG_SIZE))
  dec a
  ret z
  ld de,(zop_readn.data+(1*LONG_SIZE))
  dec a
  ret z
  ld bc,(zop_readn.data+(2*LONG_SIZE))
  dec a
  ret z
  ld ix,(zop_readn.data+(3*LONG_SIZE))
  ret

zop_readn.data: DL 0,0,0,0

#include "zmem.z80"

#endif