;; zrand.z80 -- random number generator

#include "zrand.inc"

zrand_reg: DRAND(0)


;; zrand_init -- initialize random number generator
;; INPUTS: (none)
;; OUTPUTS: (none)
;; DESTROYS: b,hl
;; ERRORS: no.
zrand_init:
  call zrand_newseed
  jp zrand_seed

;; zrand_seed -- seed random value generator
;; INPUTS:
;;  [b:hl] = seed (long)
;; OUTPUTS: (none)
;; DESTROYS: (none)
;; ERRORS: no.
zrand_seed:
  LD_BHL_TO_ABS_RAND(zrand_reg)
  ret

;; zrand_newseed -- obtain new seed for random value generator
;; INPUTS: (none)
;; OUTPUTS:
;;  [b:hl] = new seed value to use
;; DESTROYS: c,de
;; ERRORS: no.
zrand_newseed:
   SYSCALL(_RandInit)
   LD_BHL_FROM_ABS_RAND(seed1)
   ret

;; zrand_gen_raw -- generate raw random value with 23-bits of entropy
;; INPUTS: (none)
;; OUTPUTS:
;;  [b:hl][22:0] = pseudorandom value
;; ERRORS: no.
;; DESTROYS: (none)
zrand_gen_raw:
  LD_BHL_FROM_ABS_RAND(zrand_reg)
  PUSH_BHL_RAND
  SLA_BHL_RAND
  SLA_BHL_RAND ; push 22nd bit into CF
  bit ZRAND_XORBIT+2,l
  jr z,_
  ccf ; addition mod 2 of 22nd and XORBIT
_ POP_BHL_RAND
  RL_BHL_RAND
  LD_BHL_TO_ABS_RAND(zrand_reg)
  ret


;; zrand_gen -- generate random value in given range
;; INPUTS:
;;  hl = range (unsigned word)
;; OUTPUTS:
;;  hl = random number n such that 1 <= n <= range
;; ERRORS: no.
;; DESTROYS: (all)
zrand_gen:
#if 0
   ex de,hl
   call zrand_gen_raw
   push de
   ld de,LONG_MIN
   call cp_hl_de
   jr c,_
   or a,a
   sbc hl,de
_  pop de
   call div_hl_de
   ex de,hl
   inc hl
   ret
#else
  ex de,hl
  call zrand_gen_raw
  inc de
  ex de,hl
  call cp_hl_0
  ex de,hl
  ret z ; if range == UNSIGNED_MAX, return full value
  call div_hl_de
  ex de,hl  ; rand % (range + 1) -> hl
  inc hl
  ret


#endif
