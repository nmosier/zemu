;; zsave.z80 -- routines for saving & restoring game

#include "zemu.inc"
#include "zsave.inc"
#include "zutil.inc"
#include "util.inc"

;---- SAVES ----;
; There are 3 components to a save:
; - Stack contents
; - Modified page contents
; - Frame contents
; - zmap
; 1. Copy page contents and archive.
; 2. Create save appvar.
; 3. Save frame.
; 4. Save stack contents.



;; zsave_save.frame -- save frame
;; INPUTS:
;;  ix = zsave_file, with savename prefix set in FILE.NAME field
;;  de = pointer to end of prefix in FILE.NAME field
;;  bc = remaining characters in FILE.NAME field (to be used with strncpy)
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
;; NOTE: produces file with name '{SAVE}F'
zsave_save.frame:
  ;; set filename suffix
  ld hl,zsave_suffix.frame
  call strncpy
  ;; set file size
#if TI83PLUS
  ld hl,ZFRAME_SIZE
  ld (zsave_file + FILE.SIZE),hl
#elif TI84PCE
  ld (ix+FILE.SIZE),LOW_IMM(ZFRAME_SIZE)
  ld (ix+FILE.SIZE+1),HIGH_IMM(ZFRAME_SIZE)
#endif
  ;; create file
  call file_create 
  ;; copy in data
  call nc,file_baseaddr
  ret c
  ex de,hl
  ld hl,zframe_begin
  ld bc,ZFRAME_SIZE
  ldir
  call file_to_archive
  jp nc,file_close
  ret


;; zsave_save -- save game
;; INPUTS:
;;  ix = save file pointer
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
;; TODO: check length of save name string.
#if 1
zsave_save:
  ;; set name prefix
  call zsave_get_file ; ld ix,zsave_get_file
  ld de,zsave_file + FILE.NAME
  ld bc,VARNAMELEN
  call strncpy
  ;; save pages
  push de
   push bc 
    call zsave_save.pages
   pop bc
  pop de
  ;; save frame
  push de
   push bc
    call nc,zsave_save.frame
   pop bc
  pop de
  ;; save stack
  push de
   push bc
    call nc,zsave_save.stack
   pop bc
  pop de
  ;; save zmap
  push de
   push bc
    call nc,zsave_save.zmap
   pop bc
  pop de
  ret
#else
zsave_save:
  ;; set name prefix
  ld ix,zsave_file
  ld de,zsave_file + FILE.NAME
  ld bc,VARNAMELEN
  call strncpy
  ld hl,zsave_save.tab
zsave_save.loop:
  push hl
   push de
    push bc
     call nc,jp_hl
    pop bc
   pop de
  pop hl
  inc hl
  inc hl
  jr zsave_save.loop  

zsave_save.tab:
  jr zsave_save.pages
  jr zsave_save.frame
  jr zsave_save.stack
  jr zsave_save.zmap
  jp pop4
  

jp_hl:
  jp (hl)
#endif
  

;; zsave_save.stack -- save stack
;; INPUTS:
;;  ix = zsave_file, with savename prefix set in FILE.NAME field
;;  de = pointer to end of prefix in FILE.NAME field
;;  bc = remaining characters in FILE.NAME field (to be used with strncpy)
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
;; NOTE: Produces file with name '{SAVE}S'
zsave_save.stack:
  ;; set filename suffix
  ld hl,zsave_suffix.stack
  call strncpy
  ;; set file size
  ld hl,zframe_sp ; since sp is offset, it gives exact size
  LEA_DE_IX(FILE.SIZE)
  ld bc,2
  ldir
  ;; create file
  call file_create
  ;; copy stack into file
  call nc,file_baseaddr
  ex de,hl
  call nc,zstack_begin
  ret c
  ld bc,(zframe_sp)
  ldir
  call file_to_archive
  jp nc,file_close
  ret


;; zsave_save.zmap -- save zmap
;; INPUTS:
;;  ix = zsave_file, with savename prefix set in FILE.NAME field
;;  de = pointer to end of prefix in FILE.NAME field
;;  bc = remaining characters in FILE.NAME field (to be used with strncpy)
;; OUTPUTS: (none)
;; DESTROYS: (all)
zsave_save.zmap:
  ;; set filename suffix
  ld hl,zsave_suffix.zmap
  call strncpy
  ;; copy file
  ld hl,zmap_get_working_file
  ld iy,zsave_file
  call file_copy
  ld ix,zsave_file
  call nc,file_to_archive
  jp nc,file_close
  ret ; error


;; zsave_save.pages -- save pages
;; INPUTS:
;;  ix = zsave_file, with savename prefix set in FILE.NAME field
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
;; OPTIM: Stack usage.
zsave_save.pages:
  LEA_HL_IX(FILE.NAME)
  push ix
   call zmap_get_working_file
   push hl
    ld hl,ZMAP_HDR_NPAGES
    call file_addr
   pop de
   jr c,zsave_save.pages.done
   ld b,(hl)      ; pages remaining
   ld c,0         ; page ID
   ;; Iterate thru table. For each page entry, if flag `SAVE' is set,
   ;; copy the page and rename it using the given name prefix
   ;; move copied page to flash
   ;; change flags: flags <- COPY
   ld hl,ZMAP_HDRSIZE
zsave_save.pages.loop:
   ;; INVARIANTS:
   ;;  hl = current table entry
   ;;  de = name prefix
   ;;  b  = pages remaining
   ;;  c  = page ID
   push hl
    push bc
     push de
      call zmap_get_working_file
      call file_addr
      jp c,err4
      LD_IX_HL
      bit ZMAP_ENT.FLAGS.SAVE,(ix+ZMAP_ENT.FLAGS)
     pop hl
    pop bc
    jr z,zsave_save.pages.next
    push bc
     push hl
      ;; copy page
      ld a,c
      push bc
       call zmap_copypage
      pop bc
      ld a,c
      call nc,zaddr_pageent
      jp c,err4
      set ZMAP_ENT.FLAGS.COPY,(ix+ZMAP_ENT.FLAGS) ; mark pages as copy
      LEA_IX_IX(ZMAP_ENT.FILE)
      call file_to_archive
     pop de
    pop bc
zsave_save.pages.next:
   pop hl
   jr c,zsave_save.pages.done
   push de
    ld de,SIZEOF_ZMAP_ENT
    add hl,de
   pop de
   inc c
   djnz zsave_save.pages.loop
zsave_save.pages.done:
  pop ix
  ret


;; zstate_restore -- restore game
;; INPUTS:
;;  hl = name of save
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zsave_restore:
  call zsave_get_file
  ld de,zsave_file + FILE.NAME
  ld bc,VARNAMELEN
  call strncpy
  ;; restore frame
  push de
   push bc
    call zsave_restore.frame
   pop bc
  pop de
  ;; restore stack
  push de
   push bc
    call nc,zsave_restore.stack
   pop bc
  pop de
  ;; restore zmap
  push de
   push bc
    call nc,zsave_restore.zmap
   pop bc
  pop de
  ret
  

;; zsave_restore.frame -- restore frame
;; INPUTS:
;;  ix = zsave_file
;;  de = where to put suffix in zsave_file
;;  bc = characters left in zsave_file name
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
zsave_restore.frame:
  ld hl,zsave_suffix.frame
  call strncpy
  call file_open
  call nc,file_baseaddr
  ret c
  ld bc,ZFRAME_SIZE
  ld de,zframe_begin
  ldir
  jp file_close


;; zsave_restore.stack -- restore stack
;; INPUTS:
;;  ix = zsave_file
;;  de = where to put suffix in zsave_file
;;  bc = characters left in zsave_file name
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
zsave_restore.stack:
  ld hl,zsave_suffix.stack
  call strncpy
  call file_open
  call nc,zstack_begin
  push hl
   call nc,file_baseaddr
  pop de
  ret c
  ld bc,(zframe_sp)
  ldir
  jp file_close


;; zsave_restore.zmap -- restore zmap
;; INPUTS:
;;  ix = zsave_file
;;  de = where to put suffix in zsave_file
;;  bc = characters left in zsave_file name
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
zsave_restore.zmap:
  ld hl,zsave_suffix.zmap
  call strncpy
  call zmap_close
  call nc,file_open
  push iy
   ld hl,zsave_get_file
   ld iy,zmap_working_file
   call nc,file_copy
  pop iy
  call nc,zmap_open
  ld ix,zsave_file
  jp nc,file_close
  ret
  


;; zsave_restart -- restart game
;; INPUTS:
;;  hl = name of canonical zmap
;; OUTPUTS: ???
;; DESTROYS: ???
;; ERRORS: ???
;; *** portable ***
zsave_restart:
   call zmap_load      ; load canonical map into working map
   call nc,zcpu_init   ; re-init CPU
   ret
   ;; TODO -- should actually preserve two bits; see spec.
   ;; TODO -- should delete all pages that are marked as 'SAVE' in the current map.


;; [INTERNAL] zsave_get_file -- get temporary zsave file
;; INPUTS: (none)
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: no, but always NC.
zsave_get_file:
  ld ix,zsave_file
  or a,a
  ret


;--- DATA ---;
zsave_suffix.frame: .db "F",0
zsave_suffix.stack: .db "S",0
zsave_suffix.zmap: .db "M",0

zsave_file: RES_FILE
