; zstr.z80 -- routines for printing ZSCII codes

#include "zti.inc"
#include "zstr.inc"

zstr_flags: .db 0
zstr_wchar: DWC 0    ; for 10-bit ASCII chars
zstr_abbrtab: DL 0  ; for abbreviation mode

;; zstr_putc -- print single Z-char of z-string
;; INPUTS:
;;  a = Z-code (0 <= a < 32)
;; OUTPUTS:
;;  updates zstr_{shiftmode,abbrtab}
;; DESTROYS:
;; ERRORS:
;; *** portable ***
zstr_putc:
   ld hl,zstr_flags
   ; 1. Interpet as abbreviation code?
   bit ZSTR_FLAGS_ABBR,(hl)
   jr nz,zstr_putc.abbr_apply
   ; 2. Interpret as wide char bits?
   bit ZSTR_FLAGS_WCHAR,(hl)
   jp nz,zstr_putc.wchar_add
   ; 3. Is it a space?
   or a,a
   jr z,zstr_putc.space
   ; 4. Is it an abbreviation prefix?
   cp a,ZSTR_ABBRMAX+1
   jr c,zstr_putc.abbr_select
   ; 5. Is it a shift code?
   cp a,ZSTR_A1
   jr z,zstr_putc.shift_A1
   cp a,ZSTR_A2
   jr z,zstr_putc.shift_A2
   ; 6. Otherwise, is a regular character.
zstr_putc.char:
   sub a,ZSTR_AMIN
   bit ZSTR_FLAGS_SHIFT,(hl)
   res ZSTR_FLAGS_SHIFT,(hl)
   jr z,zstr_putc.char.A0
   bit ZSTR_FLAGS_AX,(hl)
   jr z,zstr_putc.char.A1
   jr zstr_putc.char.A2

zstr_putc.shift_A1:
   set ZSTR_FLAGS_SHIFT,(hl)
   res ZSTR_FLAGS_AX,(hl)
   or a,a
   ret

zstr_putc.shift_A2:
   set ZSTR_FLAGS_SHIFT,(hl)
   set ZSTR_FLAGS_AX,(hl)
   or a,a
   ret


zstr_putc.char.A0:
   ld hl,zstr_A0.tab
   jr zstr_putc.char.print

zstr_putc.char.A1:
   ld hl,zstr_A1.tab
   jr zstr_putc.char.print

zstr_putc.char.A2:
   cp a,1
   jp c,zstr_putc.wchar_select
   ld hl,zstr_A2.tab
   jr nz,zstr_putc.char.print
   call zwin_newline
   or a,a
   ret

zstr_putc.char.print:
   UCAST_A_TO_DE
   add hl,de
   ld a,(hl)
   call zstr_putc_raw
   or a,a
   ret

zstr_putc.space:
   ld a,' '
   call zstr_putc_raw
   or a,a
   ret

zstr_putc.abbr_apply:
   ; NOTE: %a still holds unmodified 5-bit code.
   res ZSTR_FLAGS_ABBR,(hl)
   ld hl,(zstr_abbrtab)
   rla ; a <- a * WORD_SIZE == a * 2 == a << 1
   UCAST_A_TO_DE
   add hl,de
   push ix
   call zaddr_fetchwu ; get word address to expanded string
   pop ix
   ret c
   ex de,hl
   ; convert to byte address
   add hl,hl
   call zstr_puts
   ret c
   ld a,(zstr_flags)
   res ZSTR_FLAGS_SHIFT,a
   ld (zstr_flags),a
   ret


zstr_putc.abbr_select:
   set ZSTR_FLAGS_ABBR,(hl)
   sub a,ZSTR_ABBRMIN
   rrca
   rrca ; a <- a * TABLE SIZE * WORD SIZE == a * 64 == a << 6 == a >> 2
   ld hl,ZHDR_ABBR
   push af
   push ix
   call zaddr_fetchwu
   pop ix
   pop bc
   ex de,hl
   UCAST_B_TO_DE
   add hl,de
   ld (zstr_abbrtab),hl
   or a,a
   ret

zstr_putc.wchar_select:
   ; update flags
   set ZSTR_FLAGS_WCHAR,(hl)
   ld de,0
   ld (zstr_wchar),de ; initialize new wchar value
   or a,a
   ret

zstr_putc.wchar_add:
   ld de,(zstr_wchar)
   bit 7,d
   jr nz,zstr_putc.wchar_add.10bits
zstr_putc.wchar_add.5bits:
   rrca
   rrca
   rrca
   ld e,a
   and a,$03
   or a,$80
   ld d,a
   ld (zstr_wchar),de
   or a,a
   ret ; success, but don't print anything b/c expecting more bits

zstr_putc.wchar_add.10bits:
   ; update flags
   res ZSTR_FLAGS_WCHAR,(hl) ; no longer expecting
   ; mask in lower 5 bits
   or a,e
   ld e,a
   res 7,d
   ; convert to ASCII char
   ex de,hl
   push ix
   call zstr_wchartoch
   pop ix
   ret c
   jp zstr_putc_raw ; put raw ASCII character
   
zstr_putc_raw:
   ; ld ix,win_main
   call zwin_putc
   or a,a
   ret

;; zstr_putw -- print Z-string contained in z-word
;; INPUTS:
;;  hl[15:0] = encoded z-string
;;  zstr_shiftmode set
;; OUTPUTS:
;;  Z if end-of-string, NZ otherwise
;;  zstr_shiftmode updated
;; DESTROYS:
;; ERRORS: yes.
;; *** portable ***
zstr_putw:
   ld a,h
   rrca
   rrca
   and a,ZSTR_CODEMASK
   push hl
   call zstr_putc
   pop hl
   ret c
   ld a,h ; lower 2 bits are upper 2 bits of 2nd code
   ld b,l
   rl b
   rla
   rl b
   rla
   rl b
   rla
   and a,ZSTR_CODEMASK
   push hl
   call zstr_putc
   pop hl
   ret c
   ld a,l
   and a,ZSTR_CODEMASK
   push hl
   call zstr_putc
   pop hl
   ret c
   bit 7,h ; whether end of string
   ret
   

;; zstr_puts -- print Z-string
;; INPUTS:
;;  hl points to Z-string
;;  zstr_shiftmode set
;; OUTPUTS:
;;  hl points to word after Z-string
;;  zstr_shiftmode updated
;; DESTROYS:
;; ERRORS: yes.
;; *** portable ***
zstr_puts:
   ;; enable paging for window
   call zwin_page
   ld a,(zstr_flags)
   res ZSTR_FLAGS_SHIFT,a
   ld (zstr_flags),a
zstr_puts.loop:
   push ix
   call zaddr_fetchwu
   pop ix
   ret c
   ex de,hl
   push de
   call zstr_putw
   pop hl
   ret c
   jr z,zstr_puts.loop ; not end of string
zstr_puts.end:
   ret

#if 0
zstr_puts_phys:
   ld a,(zstr_flags)
   res ZSTR_FLAGS_SHIFT,a
   ld (zstr_flags),a
zstr_puts_phys.loop:
   ld de,0
   ld d,(hl)
   inc hl
   ld e,(hl)
   inc hl
   ex de,hl
   push de
   call zstr_putw
   pop hl
   ret c
   jr z,zstr_puts_phys.loop ; not end of string
zstr_puts_phys.end:
   ret
#endif

zstr_A0.tab:
   .db "abcdefghijklmnopqrstuvwxyz"
zstr_A1.tab:
   .db "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
zstr_A2.tab:
   .db " ^0123456789.,!?_#'\"/\\-:()"

;; zstr_putn -- print signed number
;; INPUTS:
;;  hl = signed long to print
;;  ix = window
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: no.
;; *** portable ***
zstr_putn:
   ; 0. Enable paging for window.
   call zwin_page
   ; 1. Check sign
   ex de,hl
   or a,a
   sbc hl,hl
   sbc hl,de
   ; hl = negated val, de = original val
   or a,a ; reset CF
   sbc hl,de
   ; if val is nonnegative, then hl >= de, so CF should be reset (NC)
   ex de,hl
   jr nc,zstr_putn.u
   ex de,hl
   add hl,de ; get back abs val
   ld a,'-'
   call zwin_putc ; display negative sign
zstr_putn.u:
   ; NOTE: at least one digit will always be written, even if hl = 0.
   ;       this is what we want.
   ld bc,zstr_putn.buf_end
zstr_putn.loop:
   ld de,10
   dec bc
   push bc
   call div_hl_de
   ld bc,0
   or a,a ; reset CF
   sbc hl,bc ; set ZF
   pop bc
   ld a,e
   ld (bc),a
   jr nz,zstr_putn.loop

   ld hl,zstr_putn.buf_end
   ; NC
   sbc hl,bc ; hl holds string length
   push bc
   ld b,l    ; length < 256, so safe downcast
   pop hl
zstr_putn.disploop:
   ld a,(hl)
   add a,'0'
   call zwin_putc
   inc hl
   djnz zstr_putn.disploop
   ret

zstr_putn.buf:
   .db 0,0,0,0,0,0,0,0
zstr_putn.buf_end:


;; zstr_encode.c -- encode character as unpacked string of Z-codes in zstr_encode.buf
;; INPUTS:
;;  a = ASCII character
;;  hl = buffer pointer (must be at least ZENCODE_MAXCHARLEN in size)
;; OUTPUTS:
;;  b = number of codes written
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zstr_encode.c:
   ; NOTE: checks most likely character class first.
   ; 1. Check character classes.
   JCLASS('a', 'z', zstr_encode.c.lowercase)
   JCLASS('A', 'Z', zstr_encode.c.uppercase)
   JCLASS('0', '9', zstr_encode.c.digit)
   ; 2. Check if space.
   cp a,' '
   jr z,zstr_encode.c.space
   ; 3. Look through character code translation table.
   ex de,hl
   ld hl,zstr_encode.c.tab
   ld b,(hl)
   inc hl
zstr_encode.c.loop:
   cp a,(hl)
   inc hl
   jr z,zstr_encode.c.other
   inc hl
   djnz zstr_encode.c.loop
zstr_encode.c.notfound:
   ld a,ZERR_BADCHAR
   scf
   ret

zstr_encode.c.lowercase:
   add a,6-'a'
   ld (hl),a
   ld b,1
   or a,a
   ret
   
zstr_encode.c.uppercase:
   ld b,ZSTR_A1
   add a,6-'A'
   jr zstr_encode.c.write_pfx

zstr_encode.c.digit:
   ld b,ZSTR_A2
   add a,8-'0'
   jr zstr_encode.c.write_pfx

zstr_encode.c.space:
   ld (hl),0
   ld b,1
   ret

zstr_encode.c.other:
   ld a,ZSTR_A2 ; write prefix
   ld (de),a
   inc de
   ldi ; write character
   ld b,2
   or a,a
   ret

zstr_encode.c.write_pfx:
   ld (hl),b
   inc hl
   ld (hl),a
   ld b,2
   or a,a
   ret


zstr_encode.c.tab:
zstr_encode.c.tab_hdr:
   .db (zstr_encode.c.tab_body_end-zstr_encode.c.tab_body)/ZENCODE_TABENTSIZE
zstr_encode.c.tab_body:
   .db '.', $12
   .db ',', $13
   .db '!', $14
   .db '?', $15
   .db '_', $16
   .db '#', $17
   .db '\'',$18
   .db '\"',$19
   .db '/', $1a
   .db '\\',$1b
   .db '-', $1c
   .db ':', $1d
   .db '(', $1e
   .db ')', $1f
zstr_encode.c.tab_body_end:

;; zstr_encode.w -- Z-encode ASCII chars and coalesce into Z-char (word) if possible
;; INPUTS:
;;  a = ASCII char to encode
;;  hl = buffer begin
;;  de = pointer to packed word (output)
;;  b = count in zcode buffer
;;  c = count in output buffer
;; OUTPUTS:
;;  b, c, de updated properly
;; DESTROYS: (all)
;; ERRORS: yes.
;; NOTE: 0 <= hl - de < 3 upon invokation.
;; *** portable ***
zstr_encode.w:
   push bc
   push hl
   push de
   UCAST_B_TO_DE
   add hl,de
   call zstr_encode.c
   ld a,b
   pop de
   pop ix
   pop bc
   ret c
   add a,b
   ld b,a
   cp a,3  ; enough to reduce?
   ccf
   ret nc
   call zstr_encode.pack
zstr_encode.w.done:
   push de
   push bc
   ld a,b
   sub a,3
   jr z,zstr_encode.w.after_cpy
   LEA_HL_IX(3)
   LD_DE_IX
   UCAST_A_TO_BC
   ldir
zstr_encode.w.after_cpy:   
   pop bc
   pop de
   ld b,a
   dec c ; update words left
   xor a,a ; NC and Z
   ret

;; zstr_encode.pack -- pack loose Z-codes into Z-string word
;; INPUTS:
;;  ix = pointer to loose Z-code buffer with at least 3 entries (bytes)
;;  de = pointer to word in which to store packed result
;; OUTPUTS:
;;  (de) <- packed Z-code word
;;  de <- de + 2
;; DESTROYS: hl, a
;; ERRORS: no.
;; *** portable ***
zstr_encode.pack:
   ld h,(ix+0)
   rlc h
   rlc h
   ld l,(ix+1)
   rrc l
   rrc l
   rrc l
   ld a,$03
   and a,l
   or a,h
   ld (de),a ; store high byte
   inc de
   ld a,l
   and a,~ZSTR_CODEMASK
   or a,(ix+2)
   ld (de),a ; store low byte
   inc de
   ret

;; zstr_encode -- encode ASCII string as Z-string
;; INPUTS:
;;  hl = source ASCII string (ASCII-NUL terminated)
;;  de = destination Z-string
;;  c = destination max size in words
;; OUTPUTS:
;;  c = remaining words
;;  Z if full string written; NZ if ran out of space
;;  hl = pointer to destination Z-string
;; DESTROYS:
;; ERRORS: yes.
;; TODO: this does NOT handle ASCII codes -> ZSCII codes yet and will
;        cause undefined behavior.
;; *** portable ***
zstr_encode:
   ld b,0 ; none in buffer initially
   xor a,a
   cp a,(hl)
   jr z,zstr_encode.empty
   jr zstr_encode.entry
zstr_encode.loop:
   ; INVARIANTS:
   ;  a = current ASCII char (non-null)
   ;  b = number of unpacked z-codes in buffer.
   ;  c = number of words left in output buffer.
   ;  hl = pointer to next (possibly null) character in ASCII string
   ;  de = pointer to next word in Z-string.
   ;  (zstr_encode.len) > 0
   push hl ; ASCII pointer
   ld hl,zstr_encode.buf
   call zstr_encode.w
   pop hl ; ASCII pointer
   ret c
zstr_encode.entry:
   ld a,c
   or a,a
   jr nz,_
   cp a,b ; cp b,0
   jr nz,zstr_encode.nospace
_  ld a,(hl)
   inc hl
   or a,a
   jr nz,zstr_encode.loop
zstr_encode.term:
   ld a,b ; number of Z-chars in buffer
   or a,a
   jr z,zstr_encode.mark
   dec c  ; use +1 word for remaining characters
   ld ix,zstr_encode.buf
   cp a,2
   jr z,zstr_encode.pad2
zstr_encode.pad1:
   ld (ix+1),ZSTR_A2
zstr_encode.pad2:
   ld (ix+2),ZSTR_A2
zstr_encode.do_pack:
   call zstr_encode.pack
zstr_encode.mark:
   ex de,hl
   dec hl
   dec hl
   set 7,(hl)
   inc hl
   inc hl
   xor a,a ; NC, Z (string fit)
   ret
   
zstr_encode.empty:
   ex de,hl
   ld (hl),HIGH_IMM(ZSTR_EMPTYSTR)
   inc hl
   ld (hl),LOW_IMM(ZSTR_EMPTYSTR)
   inc hl
   dec c   ; empty Z-string takes up 1 word
   xor a,a ; NC, Z
   ret

zstr_encode.nospace:
   ex de,hl
   or a,$ff ; NC, NZ -- not enough space
   ret

;; NOTE: codes are not packed; each 5-bit code stored in separate byte.
zstr_encode.buf:
   .db 0,0,0,0,0,0
zstr_encode.buf_end:


;; zstr_encode_pad -- encode Z-string and pad out remaining words
;; INPUTS:
;;  hl = source ASCII string (ASCII-NUL terminated)
;;  de = destination Z-string
;;  c = destination size in words
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
;; NOTE: terminates string if not enough space to encode in entirety.
;; *** portable ***
zstr_encode_pad:
   call zstr_encode
   ret c
   jr nz,zstr_encode_pad.terminate ; ran out of room, so terminate
   ;; need to pad?
   ld b,c
   inc b \ dec b
   ret z  ; don't need to pad
   ;; un-null terminate Z-string
   dec hl
   dec hl
   res 7,(hl)
   inc hl
   inc hl
   ;; pad out
zstr_encode_pad.loop:
   ld (hl),HIGH_IMM(ZSTR_PADWORD)
   inc hl
   ld (hl),LOW_IMM(ZSTR_PADWORD)
   inc hl
   djnz zstr_encode_pad.loop
zstr_encode_pad.terminate:
   ;; terminate
   dec hl
   dec hl
   set 7,(hl)
   inc hl
   inc hl
zstr_encode_pad.done:
   or a,a ; NC
   ret



;; zstr_putln -- put newline in main window
;; INPUTS: (none)
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: ???
;; *** portable ***
zstr_putln:
   call zwin_newline
   or a,a
   ret


;; zstr_reset -- reset string state flags
;; INPUTS: (none)
;; OUTPUTS: (none)
;; ERRORS: no.
;; DESTROYS: (none)
;; *** portable ***
zstr_reset:
   push af
   xor a,a ; no flags
   ld (zstr_flags),a
   pop af
   ret


;; zstr_wchartoch -- convert ZSCII char (wide char) to TI char
;; INPUTS:
;;  hl[15:0] = ZSCII char
;; OUTPUTS:
;;  a = TI char
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zstr_wchartoch:
   call zstr_wchartab_zfind
   ret c
   LD_DE_FROM_IX(WCHAR_ENT_ZSCII)
   or a,a
   sbc hl,de ; index in l
   ld a,l
   add a,(ix+WCHAR_ENT_ASCII)
   or a,a ; NC
   ret


#macro WCHAR_ENT_RANGE(in_first, in_last, out_first, ioflags)
   .db ioflags                                               
   DWC in_first
   .db out_first
   .db in_last - in_first + 1
#endmacro

#macro WCHAR_ENT_SINGLE(in_ch, out_ch, ioflags)
   .db ioflags | 1                             
   DWC in_ch
   .db out_ch                                  
   .db 1
#endmacro

#define WCHAR_ENT_END .db 0

zstr_wchartab:
   WCHAR_ENT_SINGLE(ZSCII_NUL, ASCII_NUL, WCHAR_OUTM)
   WCHAR_ENT_SINGLE(ZSCII_DEL, ASCII_DEL, WCHAR_INM)
   WCHAR_ENT_SINGLE(ZSCII_NEWLINE, ASCII_NEWLINE, WCHAR_IOM)
   WCHAR_ENT_SINGLE(ZSCII_ESC, ASCII_CLEAR, WCHAR_INM)
   WCHAR_ENT_RANGE(32, 126, ' ', WCHAR_IOM)
   WCHAR_ENT_RANGE(ZSCII_UP, ZSCII_RIGHT, ASCII_UP, WCHAR_INM)
   WCHAR_ENT_RANGE(ZSCII_FN1, ZSCII_FN5, ASCII_FN1, WCHAR_INM)
   WCHAR_ENT_END

;; zstr_wchartab_.find -- find entry in ZSCII and TI char interchange table
;;   zstr_wchartab_zfind -- ... given ZSCII char
;;   zstr_wchartab_afind -- ... given TI char
;; INPUTS:
;;  (zfind) hl[15:0] = ZSCII char
;;  (afind) a = TI char
;; OUTPUTS:
;;  ix = pointer to entry
;; ERRORS: yes.
;; DESTROYS: all but hl
;; *** portable ***
zstr_wchartab_zfind:
   ld de,zstr_wchartab_find.zcmp
   jr zstr_wchartab_find.base

zstr_wchartab_afind:
   UCAST_A_TO_HL
   ld de,zstr_wchartab_find.acmp
   jr zstr_wchartab_find.base

zstr_wchartab_find.base:
   ld ix,zstr_wchartab
   jr zstr_wchartab_find.entry
zstr_wchartab_find.loop:
   ld a,(ix+WCHAR_ENT_COUNT)
   ex de,hl
   jp (hl) ; de contains char param
zstr_wchartab_find.reentry:
   ex de,hl
   call cp_hl_bc
   jr c,zstr_wchartab_find.continue
   ld a,(ix+WCHAR_ENT_COUNT)
   add a,c ;; add bc,count
   ld c,a
   ld a,b
   adc a,0
   ld b,a
   call cp_hl_bc
   jr c,zstr_wchartab_find.found
zstr_wchartab_find.continue:
   LEA_IX_IX(WCHAR_ENTSIZE)
zstr_wchartab_find.entry:
   ld a,(ix+WCHAR_ENT_FLAGS)
   or a,a
   jr nz,zstr_wchartab_find.loop ; valid entry
zstr_wchartab_find.notfound:
   scf ; not found
   ld a,ZERR_ZCHAR
   ret
   
zstr_wchartab_find.found:
   or a,a
   ret

zstr_wchartab_find.zcmp:
   LD_BC_FROM_IX_WC(WCHAR_ENT_ZSCII)
   jr zstr_wchartab_find.reentry

zstr_wchartab_find.acmp:
#if TI83PLUS
   ld b,0
#elif TI84PCE
   ld bc,0
#endif
   ld c,(ix+WCHAR_ENT_ASCII)
   jr zstr_wchartab_find.reentry



;;;;; ASCII ROUTINES ;;;;;;
;; tolower -- convert ASCII to lowercase
;; INPUTS:
;;  a = ASCII char
;; OUTPUTS:
;;  a is lowercase char if input uppercase; otherwise unchanged
;; ERRORS: no.
;; DESTROYS: (none)
;; *** portable ***
tolower:
   cp a,'A'
   ret c
   cp a,'Z'+1
   ret nc
   add a,'a'-'A'
   ret

;; tolowers -- convert ASCII string to lowercase, in place
;; INPUTS:
;;  hl = pointer to string
;; OUTPUTS:
;;  hl = pointer to lowercase string
;; ERRORS: no.
;; DESTROYS: %a
;; *** portable ***
tolowers:
   push hl
   jr tolowers.entry
tolowers.loop:
   call tolower
   ld (hl),a
tolowers.inc:
   inc hl
tolowers.entry:
   ld a,(hl)
   or a,a
   jr nz,tolowers.loop
tolowers.done:
   pop hl
   ret

;; zstr_putcode -- put ZSCII code
;; INPUTS:
;;  a = ZSCII code (lower 8 bits)
;;  ix = window pointer
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zstr_putcode:
   call zwin_page    ; enable paging
   ;; TODO -- special conversion & checks for ZSCII codes
   call zwin_putc
   or a,a ; NC
   ret
