;; *** portable ***, mostly
#ifndef ZUTIL_Z80
#define ZUTIL_Z80

#include "zti.inc"
#include "zemu.inc"
#include "zerr.inc"
#include "zutil.inc"
#include "zstr.inc"


;; pmemcmpz_b -- compare physical buffer with Z-addr buffer
;; INPUTS:
;;  hl = buffer, physical   (PA)
;;  [c:de] = buffer, Z-addr (ZA)
;;  b = number of bytes to compare
;; OUTPUTS:
;;  ZF, CF modified appropriately
;;  a = 0 on success
;;  a != 0 on error
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
pmemcmpz_b:
   ex de,hl
   ld a,b
   ld b,c
   ld c,a
pmemcmpz_b.loop:
   call zaddr_fetch
   ret c ; err
   ;; compare byte
   ex de,hl
   push hl
   ld h,(hl)
   ld l,a
   ld a,h
   cp a,l
   pop hl
   ex de,hl
   ld a,ZERR_SUCCESS
   ret nz
   inc de
   dec c
   jr nz,pmemcmpz_b.loop
   or a,a ; NC
   ret

;; zmemcmpz -- compare Z-strings in memory
;; INPUTS:
;;  [b:hl] = pointer to first Z-string
;;  [c:de] = pointer to second Z-string
;;  a = number of bytes to compare
;; OUTPUTS:
;;  ZF and CF modified appropriately
;;  a = 0 on success
;;  a != 0 on error
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
zmemcmpz:
  push af
  EX_CDE_BHL_ZA
  call zaddr_fetch ; a <- (src)
  push af
  EX_CDE_BHL_ZA
  call nc,zaddr_fetch
  jr c,zmemcmpz.err
  ex (sp),hl
  cp a,h
  pop hl
  jr nz,zmemcmpz.nz
  pop af
  dec a
  jr nz,zmemcmpz
  ret
zmemcmpz.err:
  pop bc
zmemcmpz.nz:
  pop bc
  ret


;; pmemcpyz_b -- memcpy, physical address to Z-address, up to 256 bytes
;; INPUTS:
;;  hl = physical address pointer
;;  [c:de] = Z-address pointer
;;  b = count (b == 0 => count == 256)
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
;; *** portable ***
pmemcpyz_b:
   ld a,(hl)
   inc hl
   EX_CDE_BHL_ZA
   call zaddr_store ; preserves de, c
   ret c
   EX_CDE_BHL_ZA
   djnz pmemcpyz_b
   or a,a ; NC
   ret


;; zmemcpyp_b -- memcpy, Z-address to physical address, up to 256 bytes
;; INPUTS:
;;  [b:hl] = Z-address pointer
;;  de = physical address pointer
;;  c = count
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
zmemcpyp_b:
   call zaddr_fetch ; preserves de
   ret c
   ld (de),a
   inc de
   dec c
   jr nz,zmemcpyp_b
   ret


#include "zaddr.z80"

#endif