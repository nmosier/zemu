;; *** portable ***, mostly
#ifndef ZUTIL_Z80
#define ZUTIL_Z80

#include "zti.inc"
#include "zemu.inc"
#include "zerr.inc"
#include "zutil.inc"
#include "zstr.inc"




;; pmemcmpz_b -- compare physical buffer with Z-addr buffer
;; INPUTS:
;;  hl = buffer, physical (PA)
;;  de = buffer, Z-addr   (ZA)
;;  b = number of bytes to compare
;; OUTPUTS:
;;  ZF, CF modified appropriately
;;  a = 0 on success
;;  a != 0 on error
;; DESTROYS: (all)
;; ERRORS: yes.
pmemcmpz_b:
   ex de,hl
pmemcmpz_b.loop:
   push bc
   call zaddr_fetch
   pop bc
   ret c
   ld c,a
   ld a,(de)
   cp a,c
   ld a,ZERR_SUCCESS
   ret nz
   inc de
   djnz pmemcmpz_b.loop
   or a,a ; NC
   ret

;; zmemcmpz -- compare Z-strings in memory
;; INPUTS:
;;  hl = pointer to first Z-string
;;  de = pointer to second Z-string
;;  b = number of bytes to compare
;; OUTPUTS:
;;  ZF and CF modified appropriately
;;  a = 0 on success
;;  a != 0 on error
;; DESTROYS: (all)
;; ERRORS: yes.
zmemcmpz:
   push bc
   ex de,hl
   call zaddr_fetch
   ex de,hl
   jr c,zmemcmpz.err   
   push af
   call zaddr_fetch
   pop bc
   jr c,zmemcmpz.err   
   ; lhs val = a
   ; rhs val = b
   cp a,b
   pop bc
   ld a,ZERR_SUCCESS
   ret nz ; if nonzero
   djnz zmemcmpz
   ; are equal
   ret
   
zmemcmpz.err:
   pop bc ; discard
   ret



;; pmemcpyz_b -- memcpy, physical address to Z-address, up to 256 bytes
;; INPUTS:
;;  hl = physical address pointer
;;  de = Z-address pointer
;;  b = count (b == 0 => count == 256)
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
pmemcpyz_b:
   ld a,(hl)
   inc hl
   ex de,hl
   push bc
   call zaddr_store ; preserves de
   pop bc
   ret c
   ex de,hl
   djnz pmemcpyz_b
   or a,a ; NC
   ret

;; zmemcpyp_b -- memcpy, Z-address to physical address, up to 256 bytes
;; INPUTS:
;;  hl = Z-address pointer
;;  de = physical address pointer
;;  b = count
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: yes.
zmemcpyp_b:
   ld c,b
zmemcpyp_b.loop:
   push bc
   call zaddr_fetch ; preserves de
   pop bc
   ret c
   ld (de),a
   inc de
   djnz zmemcpyp_b.loop
zmemcpyp_b.done:
   ld b,c
   or a,a
   ret


#include "zaddr.z80"

#endif