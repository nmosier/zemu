;; zwin.z80 -- window management routines
;; TODO -- need to unscale rows

#ifndef ZWIN_Z80
#define ZWIN_Z80

#include "zti.inc"
#include "zwin.inc"
#include "zstr.inc"

;; zwin_buf -- get pointer to window buffer
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS:
;;  hl = pointer to window buffer
;; ERRORS: yes.
;; DESTROYS: (none)
;; OPTIM: required
zwin_buf:
  push bc
   push de
    push af
     push ix
      LEA_IX_IX(ZWIN.FILE)
      LD_HL_0
      call file_addr
     pop ix
    pop bc
    ld a,b
   pop de
  pop bc
  ret


;; zwin_init -- initialize window
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
zwin_init:
  bit ZWIN.FLAGS.BUFD,(ix+ZWIN.FLAGS)
  jr z,_
  push ix
   LEA_IX_IX(ZWIN.FILE)
   call file_create
  pop ix
  ret c 
_ call zwin_reset
  or a,a
  ret


;; zwin_clear -- clear window
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS: (none)
;; DESTROYS: (all)
;; ERRORS: no.
;; *** portable ***
zwin_clear:
   push ix
   LEA_IX_IX_REG(ZWIN.RECT, R_DE)
   call zdisp_clearrect
   pop ix
   ret

;; zwin_org -- set window's cursor back to the origin
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS: (none)
;; DESTROYS: a, hl
;; ERRORS: no.
;; *** portable ***
zwin_org:
   ;; reset cursor
#if TI83PLUS
   ld a,(ix+ZWIN.ORGCOL)
   ld (ix+ZWIN.CURCOL),a
#elif TI84PCE
   ld hl,(ix+ZWIN.ORGCOL)
   ld (ix+ZWIN.CURCOL),hl
#endif
   ld a,(ix+ZWIN.ORGROW)
   ld (ix+ZWIN.CURROW),a
   ret



;; zwin_flush -- flush buffer of window
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS: (none)
;; DESTROYS: hl
;; ERRORS no.
;; NOTE: does not assume that window is buffered.
;; *** portable ***
zwin_flush:
   bit ZWIN.FLAGS.BUFD,(ix+ZWIN.FLAGS)
   ret z
   LD_ABS_TO_IX(ZWIN.BUFPTR, 0)
   bit ZWIN.FLAGS.PAGD,(ix+ZWIN.FLAGS)
   ret z
   LD_HL_FROM_IX(ZWIN.BUFLEN)
   LD_HL_TO_IX(ZWIN.BUFANC)
#if ZTEST
   call zwin_cksum
#endif
   ret


;; zwin_reset -- clear, flush, and org window
;; INPUTS:
;;  ix = pointer to windows struct
;; OUTPUTS: (none)
;; DESTROYS: a, hl
;; ERRORS: no.
zwin_reset:
  call zwin_clear
  call zwin_flush
  jp zwin_org

;; zwin_putc -- put character in window, buffered
;; zwin_putc_bare -- put character in window, unbuffered
;; INPUTS:
;;  ix = pointer to window struct
;;  a = character
;; OUTPUTS:
;;  ix = pointer to window struct
;;  a = character
;; DESTROYS: (all)
;; ERRORS: yes (zwin_putc), no (zwin_putc_bare).
zwin_putc:
  scf
  jr zwin_putc.base

zwin_putc_bare:
  or a,a
  jr zwin_putc.base

;; preserves %a
zwin_putc.base:
  push bc \ push hl \ push de
   push af
    ; 1.  Check if newline.
    cp a,ASCII_NEWLINE
    jr z,zwin_putc.newline
    ; 2. Check if delete.
    cp a,ASCII_DEL
    jr z,zwin_putc.del
    ; 3. Check if clear.
    cp a,ASCII_CLEAR
    jr z,zwin_putc.clear
    ; Otherwise
    call zwin_putc.base.other
zwin_putc.done:
   pop af
   ; Buffer char
   call c,zwin_bufc
zwin_putc.done_nbuf:
  pop de \ pop hl \ pop bc
  ret

zwin_putc.newline:
    call zwin_newline_bare ; already buffered
    jr zwin_putc.done

zwin_putc.del:
    call zwin_unputc
   pop bc
   ld a,b
   jr zwin_putc.done_nbuf

zwin_putc.clear:
    call zwin_clear
   pop af
   or a,a ; NC -- success
   jr zwin_putc.done_nbuf


;; zwin_newline -- put newline in window, buffered
;; zwin_newline_bare -- put newline in window, unbuffered
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS: (none)
;; DESTROYS: all but ix and %a
;; ERRORS: yes.
;; TODO: buffer this.
;; *** portable ***
zwin_newline:
  scf
zwin_newline.base:
  push af
   ld a,ASCII_NEWLINE
   call c,zwin_bufc ; put newline character in buffer
   jr c,zwin_newline.done
zwin_newline.loop:
   ld a,(ix+ZWIN.CURROW)
   sub a,(ix+ZWIN.ORGROW)   
   add a,SFONT_HEIGHT*2
   cp a,(ix+ZWIN.HEIGHT)
   jr c,zwin_newline.curset
   jr z,zwin_newline.curset
   ; test if window is single line
   ld a,(ix+ZWIN.HEIGHT)
   cp a,SFONT_HEIGHT*2
   jr c,zwin_newline.oneline
   ; scroll
   call zwin_scroll
   jr c,zwin_newline.done ; error
   jr zwin_newline.loop ; retry now
zwin_newline.curset:
   sub a,SFONT_HEIGHT
   add a,(ix+ZWIN.ORGROW)
   ld (ix+ZWIN.CURROW),a
#if TI83PLUS
   ld a,(ix+ZWIN.ORGCOL)
   ld (ix+ZWIN.CURCOL),a
#elif TI84PCE
   ld hl,(ix+ZWIN.ORGCOL)
   ld (ix+ZWIN.CURCOL),hl
#endif
zwin_newline.done:
  pop bc
  ld a,b
  ret

zwin_newline.oneline:
   call zwin_clear
  pop af
  or a,a
  ret

zwin_newline_bare:
  or a,a ; NC
  jr zwin_newline.base


;; zwin_scroll -- scroll down one line of text in window
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
;; *** portable ***
zwin_scroll:
  call zwin_trunc
  ret c
  call nz,zwin_wait ; page if necessary
  ld a,SFONT_HEIGHT
  push ix
   LEA_IX_IX_REG(ZWIN.RECT, R_DE)
   call zdisp_scrollrect_up
  pop ix
  ld a,(ix+ZWIN.CURROW)
  sub a,SFONT_HEIGHT
  jr nc,zwin_scroll.setrow
  call zwin_org
  or a,a
  ret

zwin_scroll.setrow:
  ld (ix+ZWIN.CURROW),a
  ret ; always NC

zwin_wait:
   jp sys_getkey


;; zwin_redraw -- clear and then display contents of window
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
;; TODO: this could be optimized to just copy contents in VRAM.
;; NOTE: for now, this just clears if unbuffered.
;; *** portable ***
zwin_redraw:
   call zwin_clear
   call zwin_org ; reset internal cursor to origin
   or a,a ; NC
   bit ZWIN.FLAGS.BUFD,(ix+ZWIN.FLAGS)
   ret z ; if not buffered, then nothing to redisplay
   call zwin_buf
   ret c
   LD_BC_FROM_IX(ZWIN.BUFPTR)
   call zwin_putsn_bare
   or a,a ; NC
   ret


;; zwin_bufc -- put character in buffer
;; INPUTS:
;;  ix = pointer to window struct
;;  a = character
;; OUTPUTS: (none)
;; DESTROYS: all but a
;; ERRORS: yes.
;; NOTE: This never fails. If there isn't enough space in the buffer,
;;       it truncates it first then appends the character.
;; *** portable ***
zwin_bufc:
   or a,a ; NC
   bit ZWIN.FLAGS.BUFD,(ix+ZWIN.FLAGS)
   ret z ; this window isn't buffered
   LD_HL_FROM_IX(ZWIN.BUFPTR)
   LD_DE_FROM_IX(ZWIN.BUFLEN)
   sbc hl,de
   ccf
   call c,zwin_trunc ; %a preserved
   LD_DE_FROM_IX(ZWIN.BUFPTR)
   call nc,zwin_buf
   ret c
   add hl,de
   ld (hl),a
   inc de
   LD_DE_TO_IX(ZWIN.BUFPTR)
#if ZTEST
   call zwin_cksum_putc
#endif 
   ret ; always NC, if not ZTEST


;; zwin_eol -- find end of first line
;; INPUTS:
;;  de = buffer begin pointer
;;  bc = buffer end pointer
;;  hl = width of window
;; OUTPUTS:
;;  hl = pointer to end of first line
;;  CF indicates whether line was overflown
;; DESTROYS: hl, de, bc
;; ERRORS: no.
;; OPTIM: Size could be reduced for TI83PLUS.
;; *** portable ***
zwin_eol:
   jr zwin_eol.entry
zwin_eol.loop:
   ; hl = remaining width
   ; de = buffer pointer
   ; bc = buffer end
   ; 1. Check if newline. Note that we do want to delete this char (i.e. inc de).
   ld a,(de)
   cp a,ASCII_NEWLINE
   jr z,zwin_eol.inc_found
   push bc
   
   call sfont_width
   push af
    ld a,b
    UCAST_A_TO_BC
   pop af
   
   or a,a ; NC
   sbc hl,bc
   pop bc
   jr c,zwin_eol.found ; found 1st character that doens't find on line
   inc de ; otherwise, need to consider next character
zwin_eol.entry:
   ; compare buffer pointer with buffer end
   ex de,hl
   or a,a
   sbc hl,bc
   add hl,bc
   ex de,hl
   jr nz,zwin_eol.loop
   ; reached end of buffer without overflowing first line
zwin_eol.end:
   ex de,hl
   ; hl = pointer to end of buffer
   scf ; C
   ret
zwin_eol.inc_found:
   inc de
zwin_eol.found:
   ex de,hl
   ; hl = pointer to end of line
   or a,a ; NC
   ret

;; zwin_trunc -- truncate line from buffer
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS:
;;  ZF indicates paging status
;;    Z = don't need to page
;;    NZ = should page
;; DESTROYS: all but a
;; ERRORS: yes.
;; NOTE: doesn't trigger redisplay of window.
;; OPTIM: Could be much optimized for TI83PLUS.
;; *** portable ***
zwin_trunc:
  or a,a   ; NC
  bit ZWIN.FLAGS.BUFD,(ix+ZWIN.FLAGS)
  ret z ; can't truncate if not buffered

  ; hl = width of window
  ; de = buffer begin
  ; bc = buffer end
  ex de,hl
  call zwin_buf
  ret c
  ex de,hl
  LD_HL_FROM_IX(ZWIN.BUFPTR)
  add hl,de
  LD_BC_HL
  LD_HL_FROM_IX_C(ZWIN.WIDTH)
  call zwin_eol
  
  ; hl = (one past) end of first line
  ; need to erase all bytes between ix+ZWIN.BUF and hl
  ex de,hl
  call zwin_buf
  ret c
  LD_BC_HL
  LD_HL_FROM_IX(ZWIN.BUFPTR)
  add hl,bc
  or a,a
  sbc hl,de ; hl = # of bytes to keep
  LD_BC_HL
  ; bc = count
  ; de = EOL ptr
  push de ; save EOL ptr
   ;; calculate deleted bytes
   call zwin_buf
   jr c,zwin_trunc.pop
   ex de,hl ; hl = EOL ptr
   or a,a
   sbc hl,de ; size of bytes to delete
   ex de,hl
   ;; shift bufptr
   LD_HL_FROM_IX(ZWIN.BUFPTR)
   or a,a
   sbc hl,de ; shifted bufptr
   LD_HL_TO_IX(ZWIN.BUFPTR)
   ;; try to shift bufanc
   or a,a
   bit ZWIN.FLAGS.PAGD,(ix+ZWIN.FLAGS)
   jr z,zwin_trunc.move
   ;; paging enabled
   LD_HL_FROM_IX(ZWIN.BUFANC)
   or a,a
   sbc hl,de   ; shifted anchor
   ld de,0
   ;; if CF is set, then anchored region will be scrolled offscreen
   jr nc,_
   ex de,hl
_  LD_HL_TO_IX(ZWIN.BUFANC)
zwin_trunc.move:
   call zwin_buf
   ex de,hl
zwin_trunc.pop:
  pop hl ; restore EOL ptr
  ret c
  ; hl = EOL ptr
  ; de = buf begin
  ; bc = number of bytes to keep
  push af
   call memmove
  pop af
#if ZTEST
  call zwin_cksum ; recompute cksum
#endif
  ld b,a
  sbc a,a
  ld a,b
  scf \ ccf
  ret


;; zwin_puts -- put string in window, buffered, null-terminated
;; zwin_puts_bare -- put string in window, unbuffered
;; INPUTS:
;;  ix = pointer to window struct
;;  hl = pointer to string
;; OUTPUTS: (none)
;; ERRORS: yes (zwin_puts), no (zwin_puts_bare).
;; DESTROYS: (all)
;; OPTIM: [SIZE] Could join zwin_puts, zwin_puts_bare.
;; *** portable ***
zwin_puts:
   jr zwin_puts.entry
zwin_puts.loop:
   call zwin_putc
   ret c
   inc hl
zwin_puts.entry:
   ld a,(hl)
   or a,a
   jr nz,zwin_puts.loop
zwin_puts.end:
   ret ; NC

zwin_puts_bare:
   jr zwin_puts_bare.entry
zwin_puts_bare.loop:
   call zwin_putc_bare
   inc hl
zwin_puts_bare.entry:
   ld a,(hl)
   or a,a
   jr nz,zwin_puts_bare.loop
zwin_puts_bare.end:
   ret

;; zwin_putsn -- put string in window, buffered, n bytes
;; zwin_putsn_bare -- put string in window, unbuffered, n bytes
;; INPUTS:
;;  ix = pointer to window struct
;;  hl = pointer to string
;;  bc = length of string
;; OUTPUTS: (none)
;; ERRORS: no.
;; DESTROYS: (all)
;; *** portable ***
zwin_putsn_bare:
   ld de,0
   jr zwin_putsn_bare.entry
zwin_putsn_bare.loop:
   call zwin_putc_bare
   inc hl
   dec bc
zwin_putsn_bare.entry:
   ex de,hl
   or a,a
   sbc hl,bc
   add hl,bc
   ret z ; reached end of string
   ex de,hl
   ld a,(hl)
   or a,a
   jr nz,zwin_putsn_bare.loop
zwin_putsn_bare.done:
   ret


;; zwin_setcur -- set cursor in window
;; INPUTS:
;;  ix = pointer to window struct
;;  hl = col, relative to window origin
;;  a = row, relative to window origin
;; OUTPUTS: (none)
;; DESTROYS: (none)
;; ERRORS: no.
;; NOTE: doesn't check if given row and col are within bounds of window.
;; OPTIM: ABI could be optimized for TI83PLUS.
;; *** portable ***
zwin_setcur:
   push de
   LD_DE_FROM_IX_C(ZWIN.ORGCOL)
   add hl,de
   LD_HL_TO_IX_C(ZWIN.CURCOL)
   add a,(ix+ZWIN.CURROW)
   ld (ix+ZWIN.CURROW),a
   pop de
   ret

#if ZDBG
;; zwin_split_top -- split off window from top of base window
;; zwin_split_bottom -- split off window from bottom of base window
;; INPUTS:
;;  ix = base window
;;  iy = new window
;;  a = width / height of new window
;;  b = flags of new window
;; OUTPUTS: (none)
;; DESTROYS: a, hl, de, bc
;; ERRORS: no.
;; NOTES:
;;  Both cursors reset to origin.
;;  Doesn't modify buffer of either window.
;; OPTIM: Could be optimized for TI83PLUS.
;; *** portable ***
zwin_split_top:
   ld c,1
   jr zwin_split_vert.base

zwin_split_bottom:
   ld c,0
   jr zwin_split_vert.base

; b contains new height
zwin_split_vert.org_top:
   ld a,(ix+ZWIN.ORGROW)
   ld (iy+ZWIN.ORGROW),a
   add a,(iy+ZWIN.HEIGHT)
   ld (ix+ZWIN.ORGROW),a
   jr zwin_split_vert.cont
   
zwin_split_vert.org_bottom:
   ld a,(ix+ZWIN.ORGROW)
   add a,(ix+ZWIN.HEIGHT)
   ld (iy+ZWIN.ORGROW),a
   jr zwin_split_vert.cont
   
zwin_split_vert.base:
   ; copy unchanged fields
   LD_HL_FROM_IX_C(ZWIN.ORGCOL)
   LD_HL_TO_IY_C(ZWIN.ORGCOL)
   LD_HL_FROM_IX_C(ZWIN.WIDTH)
   LD_HL_TO_IY_C(ZWIN.WIDTH)
   ; set flags
   ld (iy+ZWIN.FLAGS),b
   ; update heights
   ld (iy+ZWIN.HEIGHT),a
   sub a,(ix+ZWIN.HEIGHT)
   neg
   ld (ix+ZWIN.HEIGHT),a
   ; update org rows
   xor a,a
   cp a,c
   jr c,zwin_split_vert.org_top
   jr zwin_split_vert.org_bottom
zwin_split_vert.cont:
   ; reset main window to org
   call zwin_org
   push iy
   ex (sp),ix ; now iy <- ix
   ; reset and clear new window
   call zwin_org
   ld iy,flags
   call zwin_clear
   ex (sp),ix
   pop iy
   ret



;; zwin_split_left -- split off window from left of base window
;; zwin_split_right -- split off window from right of base window
;; INPUTS:
;;  ix = base window
;;  iy = new window
;;  hl = width of new window
;;  b = flags of new window
;; OUTPUTS: (none)
;; DESTROYS: a, hl, de, bc
;; ERRORS: no.
;; NOTES:
;;  Both cursors reset to origin.
;;  Doesn't modify buffer of either window.
;; OPTIM: Could be optimized for TI83PLUS.
;; *** portable ***
zwin_split_left:
   ld c,0
   jr zwin_split_horiz.base

zwin_split_right:
   ld c,1
   jr zwin_split_horiz.base

zwin_split_horiz.base:
   ; update window widths
   LD_HL_TO_IY_C(ZWIN.WIDTH)
   LD_DE_FROM_IX_C(ZWIN.WIDTH)
   or a,a
   ex de,hl
   sbc hl,de
   LD_HL_TO_IX_C(ZWIN.WIDTH)
   ; save flags
   ld (iy+ZWIN.FLAGS),b
   ; copy unchanged fields
   ld a,(ix+ZWIN.ORGROW)
   ld (iy+ZWIN.ORGROW),a
   ld a,(ix+ZWIN.HEIGHT)
   ld (iy+ZWIN.HEIGHT),a
   ; update orgcols
   xor a,a
   cp a,c
   jr nc,zwin_split_horiz.org_left
   jr zwin_split_horiz.org_right
zwin_split_horiz.cont:
   call zwin_org
   push iy
   ex (sp),ix
   call zwin_org
   ex (sp),ix
   pop iy
   ret

zwin_split_horiz.org_left:
   LD_HL_FROM_IX_C(ZWIN.ORGCOL)
   LD_HL_TO_IY_C(ZWIN.ORGCOL)
   LD_DE_FROM_IY_C(ZWIN.WIDTH)
   add hl,de
   LD_HL_TO_IX(ZWIN.ORGCOL)
   jr zwin_split_horiz.cont

zwin_split_horiz.org_right:
   LD_HL_FROM_IX_C(ZWIN.ORGCOL)
   LD_DE_FROM_IX_C(ZWIN.WIDTH)
   add hl,de
   LD_HL_TO_IY_C(ZWIN.ORGCOL)
   jr zwin_split_horiz.cont
#endif

;; zwin_getc -- get input character, buffered
;; zwin_getc_bare -- get input char, unbuffered
;; INPUTS:
;;  ix = pointer to window struct
;; OUTPUTS:
;;  a = char
;; ERRORS: yes.
;; DESTROYS: bc, de, hl
;; *** portable ***
zwin_getc:
   call sys_getkey
   ret c
   call ktoch
   jr c,zwin_getc ; ignore unrecognized character
   or a,a
   call nz,zwin_putc ; only put non-null characters
   ret
   
zwin_getc_bare:
   call sys_getkey
   ret c
   call ktoch
   jr c,zwin_getc_bare
   ret

;; zwin_getsn -- get input string
;; INPUTS:
;;  hl = pointer to buffer
;;  ix = pointer to window struct
;;  bc = number of bytes
;; OUTPUTS:
;;  hl = pointer to buffer
;;  bc = number of non-null ASCII chars written (not including null byte)
;; ERRORS: yes.
;; DESTROYS: (all)
;; NOTE: bc = 0 means # bytes == 2^16
;; *** portable ***
zwin_getsn:
  push hl
   push bc
    jr zwin_getsn.entry
zwin_getsn.loop:
    push hl
     push bc
#if ZCURSOR
      call zwin_putcursor
      jr c,zwin_getsn.err4
#endif
      call zwin_getc_bare ; preserves a
      jr c,zwin_getsn.err4 ; error
#if ZCURSOR
      push af
       call zwin_unputcursor
       jr c,zwin_getsn.err5
      pop af
#endif
     pop bc
    pop hl
    or a,a ; check for null term
    jr z,zwin_getsn.done

    pop de \ push de
    call zwin_getsn.handle
    jr c,zwin_getsn.err2
    jr z,zwin_getsn.done

zwin_getsn.entry:
    ld de,1
    ex de,hl
    or a,a
    sbc hl,bc
    ex de,hl
    ; continue if count > 1
    jr nz,zwin_getsn.loop
zwin_getsn.done:
    ld (hl),ASCII_NUL ; null byte
   pop hl
   or a,a
   sbc hl,bc
   LD_BC_HL
  pop hl
  or a,a
  ret


zwin_getsn.handle:
  call isprint
  jp nc,zwin_getsn.special
zwin_getsn.print:
  ; is print
  ld (hl),a
  inc hl
  dec bc
zwin_getsn.putc:
  push hl
   push bc
    call zwin_putc
   pop bc
  pop hl
  ret c
  cp a,ASCII_NEWLINE
  scf \ ccf
  ret

zwin_getsn.special:
  cp a,ASCII_DEL
  jr z,zwin_getsn.del
  or a,a
  ret ; do nothing

zwin_getsn.del:
  ; make sure to not underflow the buffer
  ; expects de = full count
  ex de,hl
  or a,a
  sbc hl,bc
  ex de,hl
  ret z ; nothing to delete
  dec hl ; delete one char
  inc bc
  jr zwin_getsn.putc

zwin_getsn.err5:
  pop hl
zwin_getsn.err4:
  pop hl
zwin_getsn.err3:
  pop hl
zwin_getsn.err2:
  pop hl
zwin_getsn.err1:
  pop hl
  ret



;; zwin_page -- enable/update paging for window
;; INPUTS:
;;  ix = window
;; OUTPUTS: (none)
;; DESTROYS: (none)
;; ERRORS: no.
;; NOTE: Safe to call even if buffering isn't enabled on the window.
;; *** portable ***
zwin_page:
   push hl
   bit ZWIN.FLAGS.BUFD,(ix+ZWIN.FLAGS)
   jr z,zwin_page.done            ; cannot page if unbuffered
   bit ZWIN.FLAGS.PAGD,(ix+ZWIN.FLAGS)
   jr nz,zwin_page.test
   set ZWIN.FLAGS.PAGD,(ix+ZWIN.FLAGS)
   LD_HL_FROM_IX(ZWIN.BUFLEN)
   jr zwin_page.newanc
zwin_page.test:
   LD_HL_FROM_IX(ZWIN.BUFANC)
   push de
    LD_DE_FROM_IX(ZWIN.BUFLEN)
    call cp_hl_de
   pop de
   jr nz,zwin_page.done ; don't need to update anchor, since it was already set
zwin_page.newanc:
   LD_HL_TO_IX(ZWIN.BUFANC)
zwin_page.done:
   pop hl
   ret

;; zwin_nopage -- disable paging for window
;; INPUTS:
;;  ix = window
;; OUTPUTS: (none)
;; ERRORS: no.
;; DESTROYS: (none)
;; NOTE: Safe to call even if buffering isn't enabled on the window.
;; *** portable ***
zwin_nopage:
   res ZWIN.FLAGS.PAGD,(ix+ZWIN.FLAGS)
   ret



;; zwin_putcursor -- display cursor in buffered window
;; INPUTS:
;;  ix = window
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: ???
;; *** portable ***
zwin_putcursor:
   ld a,ZWIN_CURSOR
   jp zwin_putc


#if TI83PLUS
#include "ti83plus/zwin.z80"
#elif TI84PCE
#include "ti84pce/zwin.z80"
#endif

#include "zdisp.z80"
#include "zfile.z80"

#endif
