>
 * appvars must be less than 256^2 bytes
 * zork is 92K
 * need to be able to experiment with different page sizes -- this should be
   easily configurable at compile time.

Should make it so zemu need not be recompiled for different block sizes.


zmap format:
* header
* zpage table
  * zpapge table entry:
    * appvar name
    * start address
    * flags:
      * whether currently in RAM
      * perhaps some LRU info?

Environment variables:
ZPAGE_SIZE: default zpage size, used in all C programs, scripts, and assembly

Notes on conventions:
 - carry flag (C) indicates error on function return.

The Memory Map
 * Need AppVar for the call state & the user stack.
   (One can grow down; the other can grow up.)
 * Start out with 1024 for call state.
 * Ideas for quick caching
   - Remember address range of last page written to.
   - Swap out when out of mem.

The Save State
 * Contents of memory map.
 * Name of zmap (story file).
 *

STACK FRAME:
[0] RETADDR     |
[3] FP          |
[6] SP          |
[9] NLOCALS     |
[10] LOCALS...  | fp
...             |
                | sp

Invariant: SP always points to next spot on stack.


FETCHING INSTRUCTION OPERANDS:
* Due to variable-operand instructions, it is not feasible to decode and save values at once.
* Furthermore, operands should be evaluated as late as possible.

typebyte: .byte 1 -- shift register, where top two bits are the next operand to decode. If $$00,
                     then there are no more operands.
typeptr: .long 1  -- points to next type byte. Must be logical address.
opptr: .long 1    -- points to next operand (if there is one).

zcode_decode should initialize these three fields, but it should not fetch any values.
There will need to be another function, perhaps called zcode_nextop or the like, that will
return the value of the next op.
