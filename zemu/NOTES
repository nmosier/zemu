>
 * appvars must be less than 256^2 bytes
 * zork is 92K
 * need to be able to experiment with different page sizes -- this should be
   easily configurable at compile time.

Should make it so zemu need not be recompiled for different block sizes.


zmap format:
* header
* zpage table
  * zpapge table entry:
    * appvar name
    * start address
    * flags:
      * whether currently in RAM
      * perhaps some LRU info?
      * read-only?

----

SAVES

A save should consist of
  (1) A zmap pointing to memory pages to use. Note the last pages will be
      shared with the canonical zmap, since only dynamic memory is legally
      modified.
  (2) Contents of zmem.
  (3) Current zframe.

The original zmap is canonical -- it should not be modified and none of the
pages it refers to should be changed.

Creating a New Save:
1. Compute required size of save AppVar.
2. Touch AppVar with required size.
3. Fill out ZSAVE.BASE.
4. Copy in variable-width fields (ZMAP and ZMEM).
5. Update ZMAP.

NOTE: ZEMU should duplicate the canonical map on startup.

But, ZEMU only needs one ``current zmap'' ever (in contrast, it needs one ``canonical zmap''
per story file).

-----
NAMING CONVENTIONS

ZMAP_CANONICAL:=$(BASE)
ZMAP_CURRENT:=$(BASE)M
ZPAGE:=$(BASE)P[A-Z]+
ZSAVE:=$(BASE)S[A-Z0-9]+

----

Environment variables:
ZPAGE_SIZE: default zpage size, used in all C programs, scripts, and assembly

Notes on conventions:
 - carry flag (C) indicates error on function return.

The Memory Map
 * Need AppVar for the call state & the user stack.
   (One can grow down; the other can grow up.)
 * Start out with 1024 for call state.
 * Ideas for quick caching
   - Remember address range of last page written to.
   - Swap out when out of mem.

The Save State
 * Contents of memory map.
 * Name of zmap (story file).
 *

STACK FRAME:
[0] RETADDR     |
[3] FP          |
[6] SP          |
[9] NLOCALS     |
[10] LOCALS...  | fp
...             |
                | sp

Invariant: SP always points to next spot on stack.


FETCHING INSTRUCTION OPERANDS:
* Due to variable-operand instructions, it is not feasible to decode and save values at once.
* Furthermore, operands should be evaluated as late as possible.

typebyte: .byte 1 -- shift register, where top two bits are the next operand to decode. If $$00,
                     then there are no more operands.
typeptr: .long 1  -- points to next type byte. Must be logical address.
opptr: .long 1    -- points to next operand (if there is one).

zcode_decode should initialize these three fields, but it should not fetch any values.
There will need to be another function, perhaps called zcode_nextop or the like, that will
return the value of the next op.


Sign-extension Controversy
* Possible resolution: when downcasting to unsigned byte, do not detect overflow if negative
  and within range.



CALLING CONVENTION
hl = first param
de = second param
bc = third param
ix = fourth param

---------

3B21 -- dictionary

2c, 2e, 22


