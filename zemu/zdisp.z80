;; zdisp.z80 -- display routines

#include "zdisp.inc"

;; sysputc -- wrapper for putc system entry point
;; INPUTS:
;;  a = ASCII char to print
;; OUTPUTS: (none)
;; DESTROYS: (none)
;; ERRORS: no.
#if 0
sysputc:
   push de
   push ix
   push bc
   ex de,hl
   ld ix,penCol
   ld l,(ix+0)
   ld h,(ix+1)
   call sfont_width
   ld b,0
   add.s hl,bc
   ld bc,DISP_WIDTH+1
   sbc hl,bc
   ex de,hl
   call nc,sysnewline
   call _VPutMap
sysputc.done:
   pop bc
   pop ix
   pop de
   ld a,b
   ret
#endif

;; sysnewline -- wrapper for newline system entry point
;; INPUTS: (none)
;; OUTPUTS: (none)
;; DESTROYS: (none)
;; ERRORS: no.
#if 0
sysnewline:
   push af
   ld a,(penRow)
   add a,SFONT_HEIGHT
   ld (penRow),a
   xor a,a
   ld (penCol),a
   ld (penCol+1),a
   pop af
   ret
#endif

;; sfont_width -- get width of small font character
;; INPUTS:
;;  a = character
;; OUTPUTS:
;;  c = width of character
;; DESTROYS: (none)
;; ERRORS: no.
sfont_width:
   push hl
   push de
   ld hl,SFONT_TAB_ADDR
   ld de,SFONT_TAB_ENTLEN
   ld d,a
   mlt de
   add hl,de
   ld c,(hl)
   pop de
   pop hl
   ret


;; sys_clrcurrow -- clear cursor row
;; INPUTS:
;;  a = cursor row (0 - 10?)
;; OUTPUTS: (none)
;; DESTROYS: a, b, de
;; ERRORS: no.
sys_clrcurrow:
   rlca
   rlca
   rlca ; a *= 8
   add a,$80
   jp _ClearRow



;; zdisp_rowaddr -- address of row in VRAM
;; INPUTS:
;;  a = row number
;; OUTPUTS:
;;  hl = row address
;; DESTROYS: de
;; ERRORS: no.
zdisp_rowaddr:
   ; lcdWidth = 64 * 5 = 2^6 * 5
   ld hl,0
   ld l,a
   add hl,hl
   add hl,hl
   add hl,hl
   add hl,hl
   add hl,hl
   push hl
   add hl,hl
   add hl,hl
   pop de
   add hl,de
   ld de,vRam
   add hl,de
   ret


;; zdisp_pixaddr -- address of pixel in VRAM
;; INPUTS:
;;  a = row number
;;  hl = column number
;; OUTPUTS:
;;  hl = pixel address
;; DESTROYS: de
;; ERRORS: no.
zdisp_pixaddr:
   push hl
   call zdisp_rowaddr
   pop de
   add hl,de
   ret
   