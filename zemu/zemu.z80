#include "ti84pce.inc"
.assume ADL=1
.org userMem-2

VARNAMELEN .equ 8
ZMAP_TABENTLEN .equ (VARNAMELEN + 1 + 3) ; this should be manually updated

ZMAP_HDR_HEADERSIZE .equ 0
ZMAP_HDR_PAGESIZE .equ ZMAP_HDR_HEADERSIZE + 1
ZMAP_HDR_STORYSIZE .equ ZMAP_HDR_PAGESIZE + 2
ZMAP_HDR_NPAGES .equ ZMAP_HDR_STORYSIZE + 3

ZMAP_ENT_VARNAME .equ 0
ZMAP_ENT_FLAGS .equ ZMAP_ENT_VARNAME + VARNAMELEN
ZMAP_ENT_PTR .equ ZMAP_ENT_FLAGS + 1

ZMAP_ENT_FLAGS_INRAM .equ 0

.db tExtTok, tAsm84CeCmp

;; TODO: change error handlers to use UNIX-like error propogation?

start:
   ; clear screen & reset cursor
   call _ClrScrnFull
   ld hl,0
   ld.s (curRow),hl
   ld hl,zork_zmap
   call zemu_open
   ret

; zemu_open -- open zemu story file
; INPUTS:
;  - hl = pointer to name of zmap appvar (should be 8 bytes)
zemu_open:
zemu_open.find_zmap:
   call appvar_to_OP1
   ; find zmap appvar
   call _ChkFindSym
   jr nc,zemu_open.found_zmap
   ld a,ZERR_NOZMAP
   jp zemu_perror
zemu_open.found_zmap:
   ; check if in RAM
   call _ChkInRAM
   jr z,zemu_open.zmap_inRAM
   ; unarchive zmap
   call _Arc_Unarc
   call _ChkFindSym
zemu_open.zmap_inRAM:
   ; store zmap pointers
   ex de,hl
   ld (zmap_appvar),hl      ; store zmap ptr
   inc hl
   inc hl
   ld (zmap_header),hl
   ld de,0
   ld e,(hl)         ; get header size
   add hl,de         ; pointer to table
   ld (zmap_table),hl
zemu_open.table_init:
   ld ix,(zmap_header)
   ld b,(ix+ZMAP_HDR_NPAGES)
   ld ix,(zmap_table)
zemu_open.table_init.loop:
   push ix
   push.s bc
   ; move varname into OP1
   lea hl,ix+ZMAP_ENT_VARNAME
   call appvar_to_OP1
   call _ChkFindSym
   jr nc,zemu_open.table_init.found_zpage
   ld a,ZERR_NOZPAGE
   pop de
   pop de
   jp zemu_perror
zemu_open.table_init.found_zpage:
   ld (ix+ZMAP_ENT_FLAGS),0
   xor a
   cp b    ; CF set iff archived
   ccf     ; CF set iff in RAM
   rl (ix+ZMAP_ENT_FLAGS)
   pop.s bc
   pop ix
   lea ix,ix+ZMAP_TABENTLEN
   ; loop condition
   djnz zemu_open.table_init.loop
   ret

;; zemu_cleanup -- cleanup in preparation for exit
zemu_cleanup:
   ; check if zmap was found
   ld hl,(zmap_appvar)
   ld de,0
   sbc hl,de ; (hl == 0)
   jr z,zemu_cleanup.table_loop.end ; skip table cleanup if zmap not loaded
   ld ix,(zmap_header)
   ld b,(ix+ZMAP_HDR_NPAGES)
   ld ix,(zmap_table)
zemu_cleanup.table_loop:
   ; if zpage is in RAM, archive it
   bit ZMAP_ENT_FLAGS_INRAM,(ix+ZMAP_ENT_FLAGS)
   jr z,zemu_cleanup.table_loop.cond
   ; move varname into OP1
   lea hl,ix+ZMAP_ENT_VARNAME
   call appvar_to_OP1
   call _Arc_Unarc ; archive zpage
zemu_cleanup.table_loop.cond:
   lea ix,ix+ZMAP_TABENTLEN
   djnz zemu_cleanup.table_loop
zemu_cleanup.table_loop.end:
zemu_cleanup.done:
zemu_exit.done:
   scf \ ccf ; success
   ret


zmap_appvar: .dl 0
zmap_header: .dl 0
zmap_table:  .dl 0

;; TESTING ;;
zork_zmap: .db "ZORK",0,0,0,0

#include "zerr.z80"
#include "zutil.z80"