#include "ti84pce.inc"
#include "zemu.inc"
#include "zhdr.inc"

.assume ADL=1
.org userMem-2

VARNAMELEN .equ 8
ZMAP_TABENTLEN .equ (VARNAMELEN + 1 + 3) ; this should be manually updated

ZMAP_HDR_BEGIN .equ 0
ZMAP_HDR_PAGEMASK .equ ZMAP_HDR_BEGIN
ZMAP_HDR_PAGEBITS .equ ZMAP_HDR_PAGEMASK + 2
ZMAP_HDR_STORYSIZE .equ ZMAP_HDR_PAGEBITS + 1
ZMAP_HDR_NPAGES .equ ZMAP_HDR_STORYSIZE + 3
ZMAP_HDR_END .equ ZMAP_HDR_NPAGES + 1

ZMAP_HDRSIZE .equ ZMAP_HDR_END - ZMAP_HDR_BEGIN

ZMAP_ENT_VARNAME .equ 0
ZMAP_ENT_FLAGS .equ ZMAP_ENT_VARNAME + VARNAMELEN
ZMAP_ENT_PTR .equ ZMAP_ENT_FLAGS + 1

ZMAP_ENT_FLAGS_INRAM .equ 0

.db tExtTok, tAsm84CeCmp

start:
   ; clear screen & reset cursor
   call _ClrScrnFull
   ld ix,curRow
   ld (ix+0),0
   ld (ix+1),0
   ld hl,zork_zmap
   call zemu_open ; open story file
   ld hl,zemu_open_str
   jp c,zemu_perror
   call zmem_init ; initialize memory
   ld hl,zmem_init_str
   jp c,zemu_perror
   call test
   ret


test:
   ld hl,$4e83
   ;; to be continued
   


test_addrs:
   ld hl,0
   call addr_test
   ld hl,1
   call addr_test
   ld hl,$1000
   call addr_test
   ld hl,$4321
   call addr_test
   ld ix,(zmap_header)
   ld hl,(ix+ZMAP_HDR_STORYSIZE)
   push hl
   dec hl
   call addr_test
   pop hl
   call addr_test
   ld hl,$FFFFFF
   call addr_test
   ret

addr_test:
   call addr_print
   call zaddr_to_paddr
   call addr_show
   ret

addr_show:
   jp c,addr_err
   jp nc,addr_println

addr_err:
   ld hl,zaddr_to_paddr_str
   jp zemu_perror

addr_print:
   push hl
   call _DispHL
   ld hl,addr_print.sep
   call _PutS
   pop hl
   ret
addr_print.sep: .db "->",0

addr_println:
   push hl
   call _DispHL
   call _NewLine
   pop hl
   ret

zemu_open_str: .db "zemu_open",0
zmem_init_str: .db "zmem_init",0
zsave_create_str: .db "zsave_create",0
zaddr_to_paddr_str: .db "zaddr_to_paddr",0

; zemu_open -- open zemu story file
; INPUTS:
;  - hl = pointer to name of zmap appvar
; OUTPUTS:
;  zemu_appvar, zemu_header, zemu_table set
; DESTROYS: (all)
zemu_open:
   ; save name
   push hl
   ld de,zmap_name
   ld bc,VARNAMELEN
   call strncpy
   pop hl
zemu_open.find_zmap:
   call appvar_to_RAM
   ld a,ZERR_NOVAR
   ret c
   ; store zmap pointers
   ex de,hl
   ld (zmap_appvar),hl      ; store zmap ptr
   inc hl
   inc hl
   ld (zmap_header),hl
   ld de,ZMAP_HDRSIZE
   add hl,de         ; pointer to table
   ld (zmap_table),hl
zemu_open.table_init:
   ld ix,(zmap_header)
   ld b,(ix+ZMAP_HDR_NPAGES)
   ld ix,(zmap_table)
zemu_open.table_init.loop:
   ; move varname into OP1
   push ix
   push.s bc
   lea hl,ix+ZMAP_ENT_VARNAME
   call appvar_to_OP1
   call _ChkFindSym
   pop.s bc
   pop ix
   ld a,ZERR_NOVAR
   ret c  ; return if no page found
   ld (ix+ZMAP_ENT_FLAGS),0
   call _ChkInRAM
   jr nz,zemu_open.table_init.loop_end
   ; set RAM flag
   set ZMAP_ENT_FLAGS_INRAM,(ix+ZMAP_ENT_FLAGS)
   ; save pointer
   inc de
   inc de
   ld (ix+ZMAP_ENT_PTR),de
   ;;; DEBUG ;;;
   lea hl,ix+ZMAP_ENT_VARNAME
   push ix
   push bc
   call _PutS
   call _NewLine
   pop bc
   pop ix
   ;;; DEBUG ;;;
zemu_open.table_init.loop_end
   lea ix,ix+ZMAP_TABENTLEN
   ; loop condition
   djnz zemu_open.table_init.loop
   scf \ ccf ; success
   ret
   
;; zemu_cleanup -- cleanup in preparation for exit
zemu_cleanup:
   ; check if zmap was found
   ld hl,(zmap_appvar)
   ld de,0
   sbc hl,de ; (hl == 0)
   jr z,zemu_cleanup.table_loop.end ; skip table cleanup if zmap not loaded
   ld ix,(zmap_header)
   ld b,(ix+ZMAP_HDR_NPAGES)
   ld ix,(zmap_table)
zemu_cleanup.table_loop:
   ; if zpage is in RAM, archive it
   bit ZMAP_ENT_FLAGS_INRAM,(ix+ZMAP_ENT_FLAGS)
   jr z,zemu_cleanup.table_loop.cond
   ; move varname into OP1
   lea hl,ix+ZMAP_ENT_VARNAME
   call appvar_to_OP1
   call _Arc_Unarc ; archive zpage
zemu_cleanup.table_loop.cond:
   lea ix,ix+ZMAP_TABENTLEN
   djnz zemu_cleanup.table_loop
zemu_cleanup.table_loop.end:
zemu_cleanup.done:
zemu_exit.done:
   scf \ ccf ; success
   ret

zmap_name: .byte VARNAMELEN
zmap_appvar: .dl 0
zmap_header: .dl 0
zmap_table:  .dl 0

;; TESTING ;;
zork_zmap: .db "ZORK",0
zork_save: .db "SAVE1",0

#include "zerr.z80"
#include "zutil.z80"
#include "zmem.z80"
#include "zaddr.z80"
#include "zmap.z80"
#include "zcode.z80"
#include "zvar.z80"
#include "zobj.z80"
#include "zop.z80"
#include "zbranch.z80"
#include "zexec.z80"
