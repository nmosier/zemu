;; zvar.z80 -- variable manip routines

#include "zvar.inc"

;; localaddr -- get address of local variable
;; INPUTS:
;;  a = variable number
;; OUTPUTS:
;;  hl = pointer to local variable
;; DESTROYS: a,de
;; ERRORS: yes. (Checks bounds of var num)
zvar_localaddr:
   ; validate var num
   dec a
   ld de,2
   ld d,a
   ld hl,zframe_nl
   cp a,(hl)
   ld a,ZERR_NOLOCL
   ccf
   ret c
   ; calculate address
   mlt de
   ld hl,(zframe_fp)
   add hl,de
   scf \ ccf ; success
   ret

;; zvar_globaladdr -- get address of global variable
;; INPUTS:
;;  a = global variable number
;; OUTPUTS:
;;  hl = logical address of global variable
;; ERRORS: (none)
;; DESTROYS: (all)
zvar_globaladdr:
   sub a,ZVAR_GLOBALMIN
   push af
   ld hl,ZHDR_GLOBALS
   call zaddr_fetchwu ; result is returned in %de, dumbass. You wrote this, remember...
   ex de,hl
   pop de
   ret c
   ld bc,2
   ld b,d
   mlt bc
   add hl,bc
   or a,a ; NC
   ret

;; zvar_fetch -- fetch variable value.
;; INPUTS:
;;  a = variable number
;; OUTPUTS:
;;  hl = variable value (16-bit)
;; DESTROYS: (all)
;; ERRORS: yes.
zvar_fetch:
   call zvar_fetch.switch
   ret c
   call wtols ; upcast
   or a,a
   ret

zvar_fetch.switch:
   cp ZVAR_STACK
   jp z,zvar_fetch.stack
   cp ZVAR_GLOBALMIN
   jp c,zvar_fetch.local
   jp zvar_fetch.global

zvar_fetch.stack:
   ; check if stack is empty
   ld de,(zframe_sp)
   ld hl,(zframe_fp)
   call cp_hl_de  ; fp < sp <=> C
   ccf
   ld a,ZERR_STACKEMPTY
   ret c
   ; get value
   ex de,hl
   ld de,0 ; zero-padding
   dec hl
   ld e,(hl)
   dec hl
   ld d,(hl)
   ; update stack ptr
   ld (zframe_sp),hl
   ex de,hl
   or a,a
   ret

zvar_fetch.local:
   ; get addr of local var (on stack)
   call zvar_localaddr
   ret c ; error
   ; load var
   ld de,0 ; zero-padding
   ld d,(hl)
   inc hl
   ld e,(hl)
   ex de,hl
   scf \ ccf
   ret

zvar_fetch.global:
   call zvar_globaladdr
   call nc,zaddr_fetchw
   ex de,hl
   ret

;; zvar_store -- store value to variable
;; INPUTS:
;;  a = variable number
;;  hl = value to store
;; OUTPUTS: (none)
;; ERRORS: yes.
;; DESTROYS: (all)
zvar_store:
   ex de,hl
   cp ZVAR_STACK
   jp z,zvar_store.stack
   cp ZVAR_GLOBALMIN
   jp c,zvar_store.local
   jp zvar_store.global

zvar_store.stack:
   ld hl,(zframe_sp)
   ld (hl),d
   inc hl
   ld (hl),e
   inc hl
   ld (zframe_sp),hl
   scf \ ccf
   ret

zvar_store.local:
   ; get addr
   push de
   call zvar_localaddr
   pop de
   ret c ; error
   ; store val
   ld (hl),d
   inc hl
   ld (hl),e
   or a,a
   ret

zvar_store.global:
   push de
   call zvar_globaladdr
   pop de
   jp nc,zaddr_storew
   ret

;; zvar_downcast -- cast unsigned value to 24 bits to 8 bits
;; INPUTS:
;;  hl = 24-bit unsigned value
;; OUTPUTS:
;;  a = 8-bit unsigned value
;; ERRORS: no.
;; DESTROYS: a
zvar_downcast:
   ld a,l
   ret


;; zvar_modify -- modify variable in place
;; INPUTS:
;;  a = variable number
;;  hl = pointer to unary function
;; OUTPUTS:
;;  (a) updated
;;  hl = new value
;; ERRORS: yes.
;; DESTROYS: (all)
zvar_modify:
   push af
   push hl
   call zvar_fetch
   pop ix
   call nc,zvar_modify.jump
   pop bc
   ld a,b
   push hl
   call nc,zvar_store
   pop hl
   ret

zvar_modify.jump:
   jp (ix)


;; zvar_write -- read variable number from memory and then store value to that variable
;; INPUTS:
;;  hl = value to store
;;  zframe_pc set
;; OUTPUTS:
;;  zframe_pc updated
;; DESTROYS: (all)
zvar_write:
   call zcode_readvarnum
   jp nc,zvar_store
   ret
